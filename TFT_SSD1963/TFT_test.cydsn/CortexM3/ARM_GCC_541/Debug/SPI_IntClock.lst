ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 1


   1              		.syntax unified
   2              		.cpu cortex-m3
   3              		.fpu softvfp
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.thumb
  14              		.syntax unified
  15              		.file	"SPI_IntClock.c"
  16              		.text
  17              	.Ltext0:
  18              		.cfi_sections	.debug_frame
  19              		.section	.text.SPI_IntClock_Start,"ax",%progbits
  20              		.align	2
  21              		.global	SPI_IntClock_Start
  22              		.thumb
  23              		.thumb_func
  24              		.type	SPI_IntClock_Start, %function
  25              	SPI_IntClock_Start:
  26              	.LFB0:
  27              		.file 1 "Generated_Source\\PSoC5\\SPI_IntClock.c"
   1:Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
   2:Generated_Source\PSoC5/SPI_IntClock.c **** * File Name: SPI_IntClock.c
   3:Generated_Source\PSoC5/SPI_IntClock.c **** * Version 2.20
   4:Generated_Source\PSoC5/SPI_IntClock.c **** *
   5:Generated_Source\PSoC5/SPI_IntClock.c **** *  Description:
   6:Generated_Source\PSoC5/SPI_IntClock.c **** *   This file provides the source code to the API for the clock component.
   7:Generated_Source\PSoC5/SPI_IntClock.c **** *
   8:Generated_Source\PSoC5/SPI_IntClock.c **** *  Note:
   9:Generated_Source\PSoC5/SPI_IntClock.c **** *
  10:Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
  11:Generated_Source\PSoC5/SPI_IntClock.c **** * Copyright 2008-2012, Cypress Semiconductor Corporation.  All rights reserved.
  12:Generated_Source\PSoC5/SPI_IntClock.c **** * You may use this file only in accordance with the license, terms, conditions, 
  13:Generated_Source\PSoC5/SPI_IntClock.c **** * disclaimers, and limitations in the end user license agreement accompanying 
  14:Generated_Source\PSoC5/SPI_IntClock.c **** * the software package with which this file was provided.
  15:Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
  16:Generated_Source\PSoC5/SPI_IntClock.c **** 
  17:Generated_Source\PSoC5/SPI_IntClock.c **** #include <cydevice_trm.h>
  18:Generated_Source\PSoC5/SPI_IntClock.c **** #include "SPI_IntClock.h"
  19:Generated_Source\PSoC5/SPI_IntClock.c **** 
  20:Generated_Source\PSoC5/SPI_IntClock.c **** /* Clock Distribution registers. */
  21:Generated_Source\PSoC5/SPI_IntClock.c **** #define CLK_DIST_LD              (* (reg8 *) CYREG_CLKDIST_LD)
  22:Generated_Source\PSoC5/SPI_IntClock.c **** #define CLK_DIST_BCFG2           (* (reg8 *) CYREG_CLKDIST_BCFG2)
  23:Generated_Source\PSoC5/SPI_IntClock.c **** #define BCFG2_MASK               (0x80u)
  24:Generated_Source\PSoC5/SPI_IntClock.c **** #define CLK_DIST_DMASK           (* (reg8 *) CYREG_CLKDIST_DMASK)
  25:Generated_Source\PSoC5/SPI_IntClock.c **** #define CLK_DIST_AMASK           (* (reg8 *) CYREG_CLKDIST_AMASK)
  26:Generated_Source\PSoC5/SPI_IntClock.c **** 
  27:Generated_Source\PSoC5/SPI_IntClock.c **** #define HAS_CLKDIST_LD_DISABLE   (CY_PSOC3 || CY_PSOC5LP)
  28:Generated_Source\PSoC5/SPI_IntClock.c **** 
  29:Generated_Source\PSoC5/SPI_IntClock.c **** 
  30:Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 2


  31:Generated_Source\PSoC5/SPI_IntClock.c **** * Function Name: SPI_IntClock_Start
  32:Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
  33:Generated_Source\PSoC5/SPI_IntClock.c **** *
  34:Generated_Source\PSoC5/SPI_IntClock.c **** * Summary:
  35:Generated_Source\PSoC5/SPI_IntClock.c **** *  Starts the clock. Note that on startup, clocks may be already running if the
  36:Generated_Source\PSoC5/SPI_IntClock.c **** *  "Start on Reset" option is enabled in the DWR.
  37:Generated_Source\PSoC5/SPI_IntClock.c **** *
  38:Generated_Source\PSoC5/SPI_IntClock.c **** * Parameters:
  39:Generated_Source\PSoC5/SPI_IntClock.c **** *  None
  40:Generated_Source\PSoC5/SPI_IntClock.c **** *
  41:Generated_Source\PSoC5/SPI_IntClock.c **** * Returns:
  42:Generated_Source\PSoC5/SPI_IntClock.c **** *  None
  43:Generated_Source\PSoC5/SPI_IntClock.c **** *
  44:Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
  45:Generated_Source\PSoC5/SPI_IntClock.c **** void SPI_IntClock_Start(void) 
  46:Generated_Source\PSoC5/SPI_IntClock.c **** {
  28              		.loc 1 46 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  47:Generated_Source\PSoC5/SPI_IntClock.c ****     /* Set the bit to enable the clock. */
  48:Generated_Source\PSoC5/SPI_IntClock.c ****     SPI_IntClock_CLKEN |= SPI_IntClock_CLKEN_MASK;
  33              		.loc 1 48 0
  34 0000 054A     		ldr	r2, .L2
  35 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  36 0004 43F00203 		orr	r3, r3, #2
  37 0008 1370     		strb	r3, [r2]
  49:Generated_Source\PSoC5/SPI_IntClock.c **** 	SPI_IntClock_CLKSTBY |= SPI_IntClock_CLKSTBY_MASK;
  38              		.loc 1 49 0
  39 000a 1032     		adds	r2, r2, #16
  40 000c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  41 000e 43F00203 		orr	r3, r3, #2
  42 0012 1370     		strb	r3, [r2]
  43 0014 7047     		bx	lr
  44              	.L3:
  45 0016 00BF     		.align	2
  46              	.L2:
  47 0018 A2430040 		.word	1073759138
  48              		.cfi_endproc
  49              	.LFE0:
  50              		.size	SPI_IntClock_Start, .-SPI_IntClock_Start
  51              		.section	.text.SPI_IntClock_Stop,"ax",%progbits
  52              		.align	2
  53              		.global	SPI_IntClock_Stop
  54              		.thumb
  55              		.thumb_func
  56              		.type	SPI_IntClock_Stop, %function
  57              	SPI_IntClock_Stop:
  58              	.LFB1:
  50:Generated_Source\PSoC5/SPI_IntClock.c **** }
  51:Generated_Source\PSoC5/SPI_IntClock.c **** 
  52:Generated_Source\PSoC5/SPI_IntClock.c **** 
  53:Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
  54:Generated_Source\PSoC5/SPI_IntClock.c **** * Function Name: SPI_IntClock_Stop
  55:Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
  56:Generated_Source\PSoC5/SPI_IntClock.c **** *
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 3


  57:Generated_Source\PSoC5/SPI_IntClock.c **** * Summary:
  58:Generated_Source\PSoC5/SPI_IntClock.c **** *  Stops the clock and returns immediately. This API does not require the
  59:Generated_Source\PSoC5/SPI_IntClock.c **** *  source clock to be running but may return before the hardware is actually
  60:Generated_Source\PSoC5/SPI_IntClock.c **** *  disabled. If the settings of the clock are changed after calling this
  61:Generated_Source\PSoC5/SPI_IntClock.c **** *  function, the clock may glitch when it is started. To avoid the clock
  62:Generated_Source\PSoC5/SPI_IntClock.c **** *  glitch, use the StopBlock function.
  63:Generated_Source\PSoC5/SPI_IntClock.c **** *
  64:Generated_Source\PSoC5/SPI_IntClock.c **** * Parameters:
  65:Generated_Source\PSoC5/SPI_IntClock.c **** *  None
  66:Generated_Source\PSoC5/SPI_IntClock.c **** *
  67:Generated_Source\PSoC5/SPI_IntClock.c **** * Returns:
  68:Generated_Source\PSoC5/SPI_IntClock.c **** *  None
  69:Generated_Source\PSoC5/SPI_IntClock.c **** *
  70:Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
  71:Generated_Source\PSoC5/SPI_IntClock.c **** void SPI_IntClock_Stop(void) 
  72:Generated_Source\PSoC5/SPI_IntClock.c **** {
  59              		.loc 1 72 0
  60              		.cfi_startproc
  61              		@ args = 0, pretend = 0, frame = 0
  62              		@ frame_needed = 0, uses_anonymous_args = 0
  63              		@ link register save eliminated.
  73:Generated_Source\PSoC5/SPI_IntClock.c ****     /* Clear the bit to disable the clock. */
  74:Generated_Source\PSoC5/SPI_IntClock.c ****     SPI_IntClock_CLKEN &= (uint8)(~SPI_IntClock_CLKEN_MASK);
  64              		.loc 1 74 0
  65 0000 054A     		ldr	r2, .L5
  66 0002 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  67 0004 03F0FD03 		and	r3, r3, #253
  68 0008 1370     		strb	r3, [r2]
  75:Generated_Source\PSoC5/SPI_IntClock.c **** 	SPI_IntClock_CLKSTBY &= (uint8)(~SPI_IntClock_CLKSTBY_MASK);
  69              		.loc 1 75 0
  70 000a 1032     		adds	r2, r2, #16
  71 000c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  72 000e 03F0FD03 		and	r3, r3, #253
  73 0012 1370     		strb	r3, [r2]
  74 0014 7047     		bx	lr
  75              	.L6:
  76 0016 00BF     		.align	2
  77              	.L5:
  78 0018 A2430040 		.word	1073759138
  79              		.cfi_endproc
  80              	.LFE1:
  81              		.size	SPI_IntClock_Stop, .-SPI_IntClock_Stop
  82              		.section	.text.SPI_IntClock_StopBlock,"ax",%progbits
  83              		.align	2
  84              		.global	SPI_IntClock_StopBlock
  85              		.thumb
  86              		.thumb_func
  87              		.type	SPI_IntClock_StopBlock, %function
  88              	SPI_IntClock_StopBlock:
  89              	.LFB2:
  76:Generated_Source\PSoC5/SPI_IntClock.c **** }
  77:Generated_Source\PSoC5/SPI_IntClock.c **** 
  78:Generated_Source\PSoC5/SPI_IntClock.c **** 
  79:Generated_Source\PSoC5/SPI_IntClock.c **** #if(CY_PSOC3 || CY_PSOC5LP)
  80:Generated_Source\PSoC5/SPI_IntClock.c **** 
  81:Generated_Source\PSoC5/SPI_IntClock.c **** 
  82:Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 4


  83:Generated_Source\PSoC5/SPI_IntClock.c **** * Function Name: SPI_IntClock_StopBlock
  84:Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
  85:Generated_Source\PSoC5/SPI_IntClock.c **** *
  86:Generated_Source\PSoC5/SPI_IntClock.c **** * Summary:
  87:Generated_Source\PSoC5/SPI_IntClock.c **** *  Stops the clock and waits for the hardware to actually be disabled before
  88:Generated_Source\PSoC5/SPI_IntClock.c **** *  returning. This ensures that the clock is never truncated (high part of the
  89:Generated_Source\PSoC5/SPI_IntClock.c **** *  cycle will terminate before the clock is disabled and the API returns).
  90:Generated_Source\PSoC5/SPI_IntClock.c **** *  Note that the source clock must be running or this API will never return as
  91:Generated_Source\PSoC5/SPI_IntClock.c **** *  a stopped clock cannot be disabled.
  92:Generated_Source\PSoC5/SPI_IntClock.c **** *
  93:Generated_Source\PSoC5/SPI_IntClock.c **** * Parameters:
  94:Generated_Source\PSoC5/SPI_IntClock.c **** *  None
  95:Generated_Source\PSoC5/SPI_IntClock.c **** *
  96:Generated_Source\PSoC5/SPI_IntClock.c **** * Returns:
  97:Generated_Source\PSoC5/SPI_IntClock.c **** *  None
  98:Generated_Source\PSoC5/SPI_IntClock.c **** *
  99:Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
 100:Generated_Source\PSoC5/SPI_IntClock.c **** void SPI_IntClock_StopBlock(void) 
 101:Generated_Source\PSoC5/SPI_IntClock.c **** {
  90              		.loc 1 101 0
  91              		.cfi_startproc
  92              		@ args = 0, pretend = 0, frame = 0
  93              		@ frame_needed = 0, uses_anonymous_args = 0
  94              		@ link register save eliminated.
 102:Generated_Source\PSoC5/SPI_IntClock.c ****     if ((SPI_IntClock_CLKEN & SPI_IntClock_CLKEN_MASK) != 0u)
  95              		.loc 1 102 0
  96 0000 164B     		ldr	r3, .L10
  97 0002 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
  98 0004 13F0020F 		tst	r3, #2
  99 0008 27D0     		beq	.L7
 100              	.LBB2:
 103:Generated_Source\PSoC5/SPI_IntClock.c ****     {
 104:Generated_Source\PSoC5/SPI_IntClock.c **** #if HAS_CLKDIST_LD_DISABLE
 105:Generated_Source\PSoC5/SPI_IntClock.c ****         uint16 oldDivider;
 106:Generated_Source\PSoC5/SPI_IntClock.c **** 
 107:Generated_Source\PSoC5/SPI_IntClock.c ****         CLK_DIST_LD = 0u;
 101              		.loc 1 107 0
 102 000a 1549     		ldr	r1, .L10+4
 103 000c 0023     		movs	r3, #0
 104 000e 0B70     		strb	r3, [r1]
 108:Generated_Source\PSoC5/SPI_IntClock.c **** 
 109:Generated_Source\PSoC5/SPI_IntClock.c ****         /* Clear all the mask bits except ours. */
 110:Generated_Source\PSoC5/SPI_IntClock.c **** #if defined(SPI_IntClock__CFG3)
 111:Generated_Source\PSoC5/SPI_IntClock.c ****         CLK_DIST_AMASK = SPI_IntClock_CLKEN_MASK;
 112:Generated_Source\PSoC5/SPI_IntClock.c ****         CLK_DIST_DMASK = 0x00u;
 113:Generated_Source\PSoC5/SPI_IntClock.c **** #else
 114:Generated_Source\PSoC5/SPI_IntClock.c ****         CLK_DIST_DMASK = SPI_IntClock_CLKEN_MASK;
 105              		.loc 1 114 0
 106 0010 0220     		movs	r0, #2
 107 0012 144A     		ldr	r2, .L10+8
 108 0014 1070     		strb	r0, [r2]
 115:Generated_Source\PSoC5/SPI_IntClock.c ****         CLK_DIST_AMASK = 0x00u;
 109              		.loc 1 115 0
 110 0016 0432     		adds	r2, r2, #4
 111 0018 1370     		strb	r3, [r2]
 116:Generated_Source\PSoC5/SPI_IntClock.c **** #endif /* SPI_IntClock__CFG3 */
 117:Generated_Source\PSoC5/SPI_IntClock.c **** 
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 5


 118:Generated_Source\PSoC5/SPI_IntClock.c ****         /* Clear mask of bus clock. */
 119:Generated_Source\PSoC5/SPI_IntClock.c ****         CLK_DIST_BCFG2 &= (uint8)(~BCFG2_MASK);
 112              		.loc 1 119 0
 113 001a 0C3A     		subs	r2, r2, #12
 114 001c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 115 001e 03F07F03 		and	r3, r3, #127
 116 0022 1370     		strb	r3, [r2]
 120:Generated_Source\PSoC5/SPI_IntClock.c **** 
 121:Generated_Source\PSoC5/SPI_IntClock.c ****         oldDivider = CY_GET_REG16(SPI_IntClock_DIV_PTR);
 117              		.loc 1 121 0
 118 0024 104B     		ldr	r3, .L10+12
 119 0026 1A88     		ldrh	r2, [r3]
 120 0028 92B2     		uxth	r2, r2
 121              	.LVL0:
 122:Generated_Source\PSoC5/SPI_IntClock.c ****         CY_SET_REG16(CYREG_CLKDIST_WRK0, oldDivider);
 122              		.loc 1 122 0
 123 002a 823B     		subs	r3, r3, #130
 124 002c 1A80     		strh	r2, [r3]	@ movhi
 123:Generated_Source\PSoC5/SPI_IntClock.c ****         CLK_DIST_LD = CYCLK_LD_DISABLE | CYCLK_LD_SYNC_EN | CYCLK_LD_LOAD;
 125              		.loc 1 123 0
 126 002e 0723     		movs	r3, #7
 127 0030 0B70     		strb	r3, [r1]
 128              	.L9:
 124:Generated_Source\PSoC5/SPI_IntClock.c **** 
 125:Generated_Source\PSoC5/SPI_IntClock.c ****         /* Wait for clock to be disabled */
 126:Generated_Source\PSoC5/SPI_IntClock.c ****         while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 129              		.loc 1 126 0 discriminator 1
 130 0032 0B4B     		ldr	r3, .L10+4
 131 0034 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 132 0036 13F0010F 		tst	r3, #1
 133 003a FAD1     		bne	.L9
 127:Generated_Source\PSoC5/SPI_IntClock.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 128:Generated_Source\PSoC5/SPI_IntClock.c **** 
 129:Generated_Source\PSoC5/SPI_IntClock.c ****         /* Clear the bit to disable the clock. */
 130:Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_CLKEN &= (uint8)(~SPI_IntClock_CLKEN_MASK);
 134              		.loc 1 130 0
 135 003c 0749     		ldr	r1, .L10
 136 003e 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 137 0040 03F0FD03 		and	r3, r3, #253
 138 0044 0B70     		strb	r3, [r1]
 131:Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_CLKSTBY &= (uint8)(~SPI_IntClock_CLKSTBY_MASK);
 139              		.loc 1 131 0
 140 0046 1031     		adds	r1, r1, #16
 141 0048 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 142 004a 03F0FD03 		and	r3, r3, #253
 143 004e 0B70     		strb	r3, [r1]
 132:Generated_Source\PSoC5/SPI_IntClock.c **** 
 133:Generated_Source\PSoC5/SPI_IntClock.c **** #if HAS_CLKDIST_LD_DISABLE
 134:Generated_Source\PSoC5/SPI_IntClock.c ****         /* Clear the disable bit */
 135:Generated_Source\PSoC5/SPI_IntClock.c ****         CLK_DIST_LD = 0x00u;
 144              		.loc 1 135 0
 145 0050 0021     		movs	r1, #0
 146 0052 034B     		ldr	r3, .L10+4
 147 0054 1970     		strb	r1, [r3]
 136:Generated_Source\PSoC5/SPI_IntClock.c ****         CY_SET_REG16(SPI_IntClock_DIV_PTR, oldDivider);
 148              		.loc 1 136 0
 149 0056 8333     		adds	r3, r3, #131
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 6


 150 0058 1A80     		strh	r2, [r3]	@ movhi
 151              	.LVL1:
 152              	.L7:
 153 005a 7047     		bx	lr
 154              	.L11:
 155              		.align	2
 156              	.L10:
 157 005c A2430040 		.word	1073759138
 158 0060 01400040 		.word	1073758209
 159 0064 10400040 		.word	1073758224
 160 0068 84400040 		.word	1073758340
 161              	.LBE2:
 162              		.cfi_endproc
 163              	.LFE2:
 164              		.size	SPI_IntClock_StopBlock, .-SPI_IntClock_StopBlock
 165              		.section	.text.SPI_IntClock_StandbyPower,"ax",%progbits
 166              		.align	2
 167              		.global	SPI_IntClock_StandbyPower
 168              		.thumb
 169              		.thumb_func
 170              		.type	SPI_IntClock_StandbyPower, %function
 171              	SPI_IntClock_StandbyPower:
 172              	.LFB3:
 137:Generated_Source\PSoC5/SPI_IntClock.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 138:Generated_Source\PSoC5/SPI_IntClock.c ****     }
 139:Generated_Source\PSoC5/SPI_IntClock.c **** }
 140:Generated_Source\PSoC5/SPI_IntClock.c **** #endif /* (CY_PSOC3 || CY_PSOC5LP) */
 141:Generated_Source\PSoC5/SPI_IntClock.c **** 
 142:Generated_Source\PSoC5/SPI_IntClock.c **** 
 143:Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
 144:Generated_Source\PSoC5/SPI_IntClock.c **** * Function Name: SPI_IntClock_StandbyPower
 145:Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
 146:Generated_Source\PSoC5/SPI_IntClock.c **** *
 147:Generated_Source\PSoC5/SPI_IntClock.c **** * Summary:
 148:Generated_Source\PSoC5/SPI_IntClock.c **** *  Sets whether the clock is active in standby mode.
 149:Generated_Source\PSoC5/SPI_IntClock.c **** *
 150:Generated_Source\PSoC5/SPI_IntClock.c **** * Parameters:
 151:Generated_Source\PSoC5/SPI_IntClock.c **** *  state:  0 to disable clock during standby, nonzero to enable.
 152:Generated_Source\PSoC5/SPI_IntClock.c **** *
 153:Generated_Source\PSoC5/SPI_IntClock.c **** * Returns:
 154:Generated_Source\PSoC5/SPI_IntClock.c **** *  None
 155:Generated_Source\PSoC5/SPI_IntClock.c **** *
 156:Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
 157:Generated_Source\PSoC5/SPI_IntClock.c **** void SPI_IntClock_StandbyPower(uint8 state) 
 158:Generated_Source\PSoC5/SPI_IntClock.c **** {
 173              		.loc 1 158 0
 174              		.cfi_startproc
 175              		@ args = 0, pretend = 0, frame = 0
 176              		@ frame_needed = 0, uses_anonymous_args = 0
 177              		@ link register save eliminated.
 178              	.LVL2:
 159:Generated_Source\PSoC5/SPI_IntClock.c ****     if(state == 0u)
 179              		.loc 1 159 0
 180 0000 28B9     		cbnz	r0, .L13
 160:Generated_Source\PSoC5/SPI_IntClock.c ****     {
 161:Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_CLKSTBY &= (uint8)(~SPI_IntClock_CLKSTBY_MASK);
 181              		.loc 1 161 0
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 7


 182 0002 064A     		ldr	r2, .L15
 183 0004 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 184 0006 03F0FD03 		and	r3, r3, #253
 185 000a 1370     		strb	r3, [r2]
 186 000c 7047     		bx	lr
 187              	.L13:
 162:Generated_Source\PSoC5/SPI_IntClock.c ****     }
 163:Generated_Source\PSoC5/SPI_IntClock.c ****     else
 164:Generated_Source\PSoC5/SPI_IntClock.c ****     {
 165:Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_CLKSTBY |= SPI_IntClock_CLKSTBY_MASK;
 188              		.loc 1 165 0
 189 000e 034A     		ldr	r2, .L15
 190 0010 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 191 0012 43F00203 		orr	r3, r3, #2
 192 0016 1370     		strb	r3, [r2]
 193 0018 7047     		bx	lr
 194              	.L16:
 195 001a 00BF     		.align	2
 196              	.L15:
 197 001c B2430040 		.word	1073759154
 198              		.cfi_endproc
 199              	.LFE3:
 200              		.size	SPI_IntClock_StandbyPower, .-SPI_IntClock_StandbyPower
 201              		.section	.text.SPI_IntClock_GetDividerRegister,"ax",%progbits
 202              		.align	2
 203              		.global	SPI_IntClock_GetDividerRegister
 204              		.thumb
 205              		.thumb_func
 206              		.type	SPI_IntClock_GetDividerRegister, %function
 207              	SPI_IntClock_GetDividerRegister:
 208              	.LFB5:
 166:Generated_Source\PSoC5/SPI_IntClock.c ****     }
 167:Generated_Source\PSoC5/SPI_IntClock.c **** }
 168:Generated_Source\PSoC5/SPI_IntClock.c **** 
 169:Generated_Source\PSoC5/SPI_IntClock.c **** 
 170:Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
 171:Generated_Source\PSoC5/SPI_IntClock.c **** * Function Name: SPI_IntClock_SetDividerRegister
 172:Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
 173:Generated_Source\PSoC5/SPI_IntClock.c **** *
 174:Generated_Source\PSoC5/SPI_IntClock.c **** * Summary:
 175:Generated_Source\PSoC5/SPI_IntClock.c **** *  Modifies the clock divider and, thus, the frequency. When the clock divider
 176:Generated_Source\PSoC5/SPI_IntClock.c **** *  register is set to zero or changed from zero, the clock will be temporarily
 177:Generated_Source\PSoC5/SPI_IntClock.c **** *  disabled in order to change the SSS mode bit. If the clock is enabled when
 178:Generated_Source\PSoC5/SPI_IntClock.c **** *  SetDividerRegister is called, then the source clock must be running.
 179:Generated_Source\PSoC5/SPI_IntClock.c **** *
 180:Generated_Source\PSoC5/SPI_IntClock.c **** * Parameters:
 181:Generated_Source\PSoC5/SPI_IntClock.c **** *  clkDivider:  Divider register value (0-65,535). This value is NOT the
 182:Generated_Source\PSoC5/SPI_IntClock.c **** *    divider; the clock hardware divides by clkDivider plus one. For example,
 183:Generated_Source\PSoC5/SPI_IntClock.c **** *    to divide the clock by 2, this parameter should be set to 1.
 184:Generated_Source\PSoC5/SPI_IntClock.c **** *  restart:  If nonzero, restarts the clock divider: the current clock cycle
 185:Generated_Source\PSoC5/SPI_IntClock.c **** *   will be truncated and the new divide value will take effect immediately. If
 186:Generated_Source\PSoC5/SPI_IntClock.c **** *   zero, the new divide value will take effect at the end of the current clock
 187:Generated_Source\PSoC5/SPI_IntClock.c **** *   cycle.
 188:Generated_Source\PSoC5/SPI_IntClock.c **** *
 189:Generated_Source\PSoC5/SPI_IntClock.c **** * Returns:
 190:Generated_Source\PSoC5/SPI_IntClock.c **** *  None
 191:Generated_Source\PSoC5/SPI_IntClock.c **** *
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 8


 192:Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
 193:Generated_Source\PSoC5/SPI_IntClock.c **** void SPI_IntClock_SetDividerRegister(uint16 clkDivider, uint8 restart)
 194:Generated_Source\PSoC5/SPI_IntClock.c ****                                 
 195:Generated_Source\PSoC5/SPI_IntClock.c **** {
 196:Generated_Source\PSoC5/SPI_IntClock.c ****     uint8 enabled;
 197:Generated_Source\PSoC5/SPI_IntClock.c **** 
 198:Generated_Source\PSoC5/SPI_IntClock.c ****     uint8 currSrc = SPI_IntClock_GetSourceRegister();
 199:Generated_Source\PSoC5/SPI_IntClock.c ****     uint16 oldDivider = SPI_IntClock_GetDividerRegister();
 200:Generated_Source\PSoC5/SPI_IntClock.c **** 
 201:Generated_Source\PSoC5/SPI_IntClock.c ****     if (clkDivider != oldDivider)
 202:Generated_Source\PSoC5/SPI_IntClock.c ****     {
 203:Generated_Source\PSoC5/SPI_IntClock.c ****         enabled = SPI_IntClock_CLKEN & SPI_IntClock_CLKEN_MASK;
 204:Generated_Source\PSoC5/SPI_IntClock.c **** 
 205:Generated_Source\PSoC5/SPI_IntClock.c ****         if ((currSrc == (uint8)CYCLK_SRC_SEL_CLK_SYNC_D) && ((oldDivider == 0u) || (clkDivider == 0
 206:Generated_Source\PSoC5/SPI_IntClock.c ****         {
 207:Generated_Source\PSoC5/SPI_IntClock.c ****             /* Moving to/from SSS requires correct ordering to prevent halting the clock    */
 208:Generated_Source\PSoC5/SPI_IntClock.c ****             if (oldDivider == 0u)
 209:Generated_Source\PSoC5/SPI_IntClock.c ****             {
 210:Generated_Source\PSoC5/SPI_IntClock.c ****                 /* Moving away from SSS, set the divider first so when SSS is cleared we    */
 211:Generated_Source\PSoC5/SPI_IntClock.c ****                 /* don't halt the clock.  Using the shadow load isn't required as the       */
 212:Generated_Source\PSoC5/SPI_IntClock.c ****                 /* divider is ignored while SSS is set.                                     */
 213:Generated_Source\PSoC5/SPI_IntClock.c ****                 CY_SET_REG16(SPI_IntClock_DIV_PTR, clkDivider);
 214:Generated_Source\PSoC5/SPI_IntClock.c ****                 SPI_IntClock_MOD_SRC &= (uint8)(~CYCLK_SSS);
 215:Generated_Source\PSoC5/SPI_IntClock.c ****             }
 216:Generated_Source\PSoC5/SPI_IntClock.c ****             else
 217:Generated_Source\PSoC5/SPI_IntClock.c ****             {
 218:Generated_Source\PSoC5/SPI_IntClock.c ****                 /* Moving to SSS, set SSS which then ignores the divider and we can set     */
 219:Generated_Source\PSoC5/SPI_IntClock.c ****                 /* it without bothering with the shadow load.                               */
 220:Generated_Source\PSoC5/SPI_IntClock.c ****                 SPI_IntClock_MOD_SRC |= CYCLK_SSS;
 221:Generated_Source\PSoC5/SPI_IntClock.c ****                 CY_SET_REG16(SPI_IntClock_DIV_PTR, clkDivider);
 222:Generated_Source\PSoC5/SPI_IntClock.c ****             }
 223:Generated_Source\PSoC5/SPI_IntClock.c ****         }
 224:Generated_Source\PSoC5/SPI_IntClock.c ****         else
 225:Generated_Source\PSoC5/SPI_IntClock.c ****         {
 226:Generated_Source\PSoC5/SPI_IntClock.c **** 			
 227:Generated_Source\PSoC5/SPI_IntClock.c ****             if (enabled != 0u)
 228:Generated_Source\PSoC5/SPI_IntClock.c ****             {
 229:Generated_Source\PSoC5/SPI_IntClock.c ****                 CLK_DIST_LD = 0x00u;
 230:Generated_Source\PSoC5/SPI_IntClock.c **** 
 231:Generated_Source\PSoC5/SPI_IntClock.c ****                 /* Clear all the mask bits except ours. */
 232:Generated_Source\PSoC5/SPI_IntClock.c **** #if defined(SPI_IntClock__CFG3)
 233:Generated_Source\PSoC5/SPI_IntClock.c ****                 CLK_DIST_AMASK = SPI_IntClock_CLKEN_MASK;
 234:Generated_Source\PSoC5/SPI_IntClock.c ****                 CLK_DIST_DMASK = 0x00u;
 235:Generated_Source\PSoC5/SPI_IntClock.c **** #else
 236:Generated_Source\PSoC5/SPI_IntClock.c ****                 CLK_DIST_DMASK = SPI_IntClock_CLKEN_MASK;
 237:Generated_Source\PSoC5/SPI_IntClock.c ****                 CLK_DIST_AMASK = 0x00u;
 238:Generated_Source\PSoC5/SPI_IntClock.c **** #endif /* SPI_IntClock__CFG3 */
 239:Generated_Source\PSoC5/SPI_IntClock.c ****                 /* Clear mask of bus clock. */
 240:Generated_Source\PSoC5/SPI_IntClock.c ****                 CLK_DIST_BCFG2 &= (uint8)(~BCFG2_MASK);
 241:Generated_Source\PSoC5/SPI_IntClock.c **** 
 242:Generated_Source\PSoC5/SPI_IntClock.c ****                 /* If clock is currently enabled, disable it if async or going from N-to-1*/
 243:Generated_Source\PSoC5/SPI_IntClock.c ****                 if (((SPI_IntClock_MOD_SRC & CYCLK_SYNC) == 0u) || (clkDivider == 0u))
 244:Generated_Source\PSoC5/SPI_IntClock.c ****                 {
 245:Generated_Source\PSoC5/SPI_IntClock.c **** #if HAS_CLKDIST_LD_DISABLE
 246:Generated_Source\PSoC5/SPI_IntClock.c ****                     CY_SET_REG16(CYREG_CLKDIST_WRK0, oldDivider);
 247:Generated_Source\PSoC5/SPI_IntClock.c ****                     CLK_DIST_LD = CYCLK_LD_DISABLE|CYCLK_LD_SYNC_EN|CYCLK_LD_LOAD;
 248:Generated_Source\PSoC5/SPI_IntClock.c **** 
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 9


 249:Generated_Source\PSoC5/SPI_IntClock.c ****                     /* Wait for clock to be disabled */
 250:Generated_Source\PSoC5/SPI_IntClock.c ****                     while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 251:Generated_Source\PSoC5/SPI_IntClock.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 252:Generated_Source\PSoC5/SPI_IntClock.c **** 
 253:Generated_Source\PSoC5/SPI_IntClock.c ****                     SPI_IntClock_CLKEN &= (uint8)(~SPI_IntClock_CLKEN_MASK);
 254:Generated_Source\PSoC5/SPI_IntClock.c **** 
 255:Generated_Source\PSoC5/SPI_IntClock.c **** #if HAS_CLKDIST_LD_DISABLE
 256:Generated_Source\PSoC5/SPI_IntClock.c ****                     /* Clear the disable bit */
 257:Generated_Source\PSoC5/SPI_IntClock.c ****                     CLK_DIST_LD = 0x00u;
 258:Generated_Source\PSoC5/SPI_IntClock.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 259:Generated_Source\PSoC5/SPI_IntClock.c ****                 }
 260:Generated_Source\PSoC5/SPI_IntClock.c ****             }
 261:Generated_Source\PSoC5/SPI_IntClock.c **** 
 262:Generated_Source\PSoC5/SPI_IntClock.c ****             /* Load divide value. */
 263:Generated_Source\PSoC5/SPI_IntClock.c ****             if ((SPI_IntClock_CLKEN & SPI_IntClock_CLKEN_MASK) != 0u)
 264:Generated_Source\PSoC5/SPI_IntClock.c ****             {
 265:Generated_Source\PSoC5/SPI_IntClock.c ****                 /* If the clock is still enabled, use the shadow registers */
 266:Generated_Source\PSoC5/SPI_IntClock.c ****                 CY_SET_REG16(CYREG_CLKDIST_WRK0, clkDivider);
 267:Generated_Source\PSoC5/SPI_IntClock.c **** 
 268:Generated_Source\PSoC5/SPI_IntClock.c ****                 CLK_DIST_LD = (CYCLK_LD_LOAD | ((restart != 0u) ? CYCLK_LD_SYNC_EN : 0x00u));
 269:Generated_Source\PSoC5/SPI_IntClock.c ****                 while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 270:Generated_Source\PSoC5/SPI_IntClock.c ****             }
 271:Generated_Source\PSoC5/SPI_IntClock.c ****             else
 272:Generated_Source\PSoC5/SPI_IntClock.c ****             {
 273:Generated_Source\PSoC5/SPI_IntClock.c ****                 /* If the clock is disabled, set the divider directly */
 274:Generated_Source\PSoC5/SPI_IntClock.c ****                 CY_SET_REG16(SPI_IntClock_DIV_PTR, clkDivider);
 275:Generated_Source\PSoC5/SPI_IntClock.c **** 				SPI_IntClock_CLKEN |= enabled;
 276:Generated_Source\PSoC5/SPI_IntClock.c ****             }
 277:Generated_Source\PSoC5/SPI_IntClock.c ****         }
 278:Generated_Source\PSoC5/SPI_IntClock.c ****     }
 279:Generated_Source\PSoC5/SPI_IntClock.c **** }
 280:Generated_Source\PSoC5/SPI_IntClock.c **** 
 281:Generated_Source\PSoC5/SPI_IntClock.c **** 
 282:Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
 283:Generated_Source\PSoC5/SPI_IntClock.c **** * Function Name: SPI_IntClock_GetDividerRegister
 284:Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
 285:Generated_Source\PSoC5/SPI_IntClock.c **** *
 286:Generated_Source\PSoC5/SPI_IntClock.c **** * Summary:
 287:Generated_Source\PSoC5/SPI_IntClock.c **** *  Gets the clock divider register value.
 288:Generated_Source\PSoC5/SPI_IntClock.c **** *
 289:Generated_Source\PSoC5/SPI_IntClock.c **** * Parameters:
 290:Generated_Source\PSoC5/SPI_IntClock.c **** *  None
 291:Generated_Source\PSoC5/SPI_IntClock.c **** *
 292:Generated_Source\PSoC5/SPI_IntClock.c **** * Returns:
 293:Generated_Source\PSoC5/SPI_IntClock.c **** *  Divide value of the clock minus 1. For example, if the clock is set to
 294:Generated_Source\PSoC5/SPI_IntClock.c **** *  divide by 2, the return value will be 1.
 295:Generated_Source\PSoC5/SPI_IntClock.c **** *
 296:Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
 297:Generated_Source\PSoC5/SPI_IntClock.c **** uint16 SPI_IntClock_GetDividerRegister(void) 
 298:Generated_Source\PSoC5/SPI_IntClock.c **** {
 209              		.loc 1 298 0
 210              		.cfi_startproc
 211              		@ args = 0, pretend = 0, frame = 0
 212              		@ frame_needed = 0, uses_anonymous_args = 0
 213              		@ link register save eliminated.
 299:Generated_Source\PSoC5/SPI_IntClock.c ****     return CY_GET_REG16(SPI_IntClock_DIV_PTR);
 214              		.loc 1 299 0
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 10


 215 0000 014B     		ldr	r3, .L18
 216 0002 1888     		ldrh	r0, [r3]
 300:Generated_Source\PSoC5/SPI_IntClock.c **** }
 217              		.loc 1 300 0
 218 0004 80B2     		uxth	r0, r0
 219 0006 7047     		bx	lr
 220              	.L19:
 221              		.align	2
 222              	.L18:
 223 0008 84400040 		.word	1073758340
 224              		.cfi_endproc
 225              	.LFE5:
 226              		.size	SPI_IntClock_GetDividerRegister, .-SPI_IntClock_GetDividerRegister
 227              		.section	.text.SPI_IntClock_SetModeRegister,"ax",%progbits
 228              		.align	2
 229              		.global	SPI_IntClock_SetModeRegister
 230              		.thumb
 231              		.thumb_func
 232              		.type	SPI_IntClock_SetModeRegister, %function
 233              	SPI_IntClock_SetModeRegister:
 234              	.LFB6:
 301:Generated_Source\PSoC5/SPI_IntClock.c **** 
 302:Generated_Source\PSoC5/SPI_IntClock.c **** 
 303:Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
 304:Generated_Source\PSoC5/SPI_IntClock.c **** * Function Name: SPI_IntClock_SetModeRegister
 305:Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
 306:Generated_Source\PSoC5/SPI_IntClock.c **** *
 307:Generated_Source\PSoC5/SPI_IntClock.c **** * Summary:
 308:Generated_Source\PSoC5/SPI_IntClock.c **** *  Sets flags that control the operating mode of the clock. This function only
 309:Generated_Source\PSoC5/SPI_IntClock.c **** *  changes flags from 0 to 1; flags that are already 1 will remain unchanged.
 310:Generated_Source\PSoC5/SPI_IntClock.c **** *  To clear flags, use the ClearModeRegister function. The clock must be
 311:Generated_Source\PSoC5/SPI_IntClock.c **** *  disabled before changing the mode.
 312:Generated_Source\PSoC5/SPI_IntClock.c **** *
 313:Generated_Source\PSoC5/SPI_IntClock.c **** * Parameters:
 314:Generated_Source\PSoC5/SPI_IntClock.c **** *  clkMode: Bit mask containing the bits to set. For PSoC 3 and PSoC 5,
 315:Generated_Source\PSoC5/SPI_IntClock.c **** *   clkMode should be a set of the following optional bits or'ed together.
 316:Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_EARLY Enable early phase mode. Rising edge of output clock will
 317:Generated_Source\PSoC5/SPI_IntClock.c **** *                 occur when the divider count reaches half of the divide
 318:Generated_Source\PSoC5/SPI_IntClock.c **** *                 value.
 319:Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_DUTY  Enable 50% duty cycle output. When enabled, the output clock
 320:Generated_Source\PSoC5/SPI_IntClock.c **** *                 is asserted for approximately half of its period. When
 321:Generated_Source\PSoC5/SPI_IntClock.c **** *                 disabled, the output clock is asserted for one period of the
 322:Generated_Source\PSoC5/SPI_IntClock.c **** *                 source clock.
 323:Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_SYNC  Enable output synchronization to master clock. This should
 324:Generated_Source\PSoC5/SPI_IntClock.c **** *                 be enabled for all synchronous clocks.
 325:Generated_Source\PSoC5/SPI_IntClock.c **** *   See the Technical Reference Manual for details about setting the mode of
 326:Generated_Source\PSoC5/SPI_IntClock.c **** *   the clock. Specifically, see the CLKDIST.DCFG.CFG2 register.
 327:Generated_Source\PSoC5/SPI_IntClock.c **** *
 328:Generated_Source\PSoC5/SPI_IntClock.c **** * Returns:
 329:Generated_Source\PSoC5/SPI_IntClock.c **** *  None
 330:Generated_Source\PSoC5/SPI_IntClock.c **** *
 331:Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
 332:Generated_Source\PSoC5/SPI_IntClock.c **** void SPI_IntClock_SetModeRegister(uint8 modeBitMask) 
 333:Generated_Source\PSoC5/SPI_IntClock.c **** {
 235              		.loc 1 333 0
 236              		.cfi_startproc
 237              		@ args = 0, pretend = 0, frame = 0
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 11


 238              		@ frame_needed = 0, uses_anonymous_args = 0
 239              		@ link register save eliminated.
 240              	.LVL3:
 334:Generated_Source\PSoC5/SPI_IntClock.c ****     SPI_IntClock_MOD_SRC |= modeBitMask & (uint8)SPI_IntClock_MODE_MASK;
 241              		.loc 1 334 0
 242 0000 034B     		ldr	r3, .L21
 243 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 244 0004 00F0F800 		and	r0, r0, #248
 245              	.LVL4:
 246 0008 1043     		orrs	r0, r0, r2
 247 000a 1870     		strb	r0, [r3]
 248 000c 7047     		bx	lr
 249              	.L22:
 250 000e 00BF     		.align	2
 251              	.L21:
 252 0010 86400040 		.word	1073758342
 253              		.cfi_endproc
 254              	.LFE6:
 255              		.size	SPI_IntClock_SetModeRegister, .-SPI_IntClock_SetModeRegister
 256              		.section	.text.SPI_IntClock_ClearModeRegister,"ax",%progbits
 257              		.align	2
 258              		.global	SPI_IntClock_ClearModeRegister
 259              		.thumb
 260              		.thumb_func
 261              		.type	SPI_IntClock_ClearModeRegister, %function
 262              	SPI_IntClock_ClearModeRegister:
 263              	.LFB7:
 335:Generated_Source\PSoC5/SPI_IntClock.c **** }
 336:Generated_Source\PSoC5/SPI_IntClock.c **** 
 337:Generated_Source\PSoC5/SPI_IntClock.c **** 
 338:Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
 339:Generated_Source\PSoC5/SPI_IntClock.c **** * Function Name: SPI_IntClock_ClearModeRegister
 340:Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
 341:Generated_Source\PSoC5/SPI_IntClock.c **** *
 342:Generated_Source\PSoC5/SPI_IntClock.c **** * Summary:
 343:Generated_Source\PSoC5/SPI_IntClock.c **** *  Clears flags that control the operating mode of the clock. This function
 344:Generated_Source\PSoC5/SPI_IntClock.c **** *  only changes flags from 1 to 0; flags that are already 0 will remain
 345:Generated_Source\PSoC5/SPI_IntClock.c **** *  unchanged. To set flags, use the SetModeRegister function. The clock must be
 346:Generated_Source\PSoC5/SPI_IntClock.c **** *  disabled before changing the mode.
 347:Generated_Source\PSoC5/SPI_IntClock.c **** *
 348:Generated_Source\PSoC5/SPI_IntClock.c **** * Parameters:
 349:Generated_Source\PSoC5/SPI_IntClock.c **** *  clkMode: Bit mask containing the bits to clear. For PSoC 3 and PSoC 5,
 350:Generated_Source\PSoC5/SPI_IntClock.c **** *   clkMode should be a set of the following optional bits or'ed together.
 351:Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_EARLY Enable early phase mode. Rising edge of output clock will
 352:Generated_Source\PSoC5/SPI_IntClock.c **** *                 occur when the divider count reaches half of the divide
 353:Generated_Source\PSoC5/SPI_IntClock.c **** *                 value.
 354:Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_DUTY  Enable 50% duty cycle output. When enabled, the output clock
 355:Generated_Source\PSoC5/SPI_IntClock.c **** *                 is asserted for approximately half of its period. When
 356:Generated_Source\PSoC5/SPI_IntClock.c **** *                 disabled, the output clock is asserted for one period of the
 357:Generated_Source\PSoC5/SPI_IntClock.c **** *                 source clock.
 358:Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_SYNC  Enable output synchronization to master clock. This should
 359:Generated_Source\PSoC5/SPI_IntClock.c **** *                 be enabled for all synchronous clocks.
 360:Generated_Source\PSoC5/SPI_IntClock.c **** *   See the Technical Reference Manual for details about setting the mode of
 361:Generated_Source\PSoC5/SPI_IntClock.c **** *   the clock. Specifically, see the CLKDIST.DCFG.CFG2 register.
 362:Generated_Source\PSoC5/SPI_IntClock.c **** *
 363:Generated_Source\PSoC5/SPI_IntClock.c **** * Returns:
 364:Generated_Source\PSoC5/SPI_IntClock.c **** *  None
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 12


 365:Generated_Source\PSoC5/SPI_IntClock.c **** *
 366:Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
 367:Generated_Source\PSoC5/SPI_IntClock.c **** void SPI_IntClock_ClearModeRegister(uint8 modeBitMask) 
 368:Generated_Source\PSoC5/SPI_IntClock.c **** {
 264              		.loc 1 368 0
 265              		.cfi_startproc
 266              		@ args = 0, pretend = 0, frame = 0
 267              		@ frame_needed = 0, uses_anonymous_args = 0
 268              		@ link register save eliminated.
 269              	.LVL5:
 369:Generated_Source\PSoC5/SPI_IntClock.c ****     SPI_IntClock_MOD_SRC &= (uint8)(~modeBitMask) | (uint8)(~(uint8)(SPI_IntClock_MODE_MASK));
 270              		.loc 1 369 0
 271 0000 044B     		ldr	r3, .L24
 272 0002 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
 273 0004 C043     		mvns	r0, r0
 274              	.LVL6:
 275 0006 C0B2     		uxtb	r0, r0
 276 0008 40F00700 		orr	r0, r0, #7
 277 000c 1040     		ands	r0, r0, r2
 278 000e 1870     		strb	r0, [r3]
 279 0010 7047     		bx	lr
 280              	.L25:
 281 0012 00BF     		.align	2
 282              	.L24:
 283 0014 86400040 		.word	1073758342
 284              		.cfi_endproc
 285              	.LFE7:
 286              		.size	SPI_IntClock_ClearModeRegister, .-SPI_IntClock_ClearModeRegister
 287              		.section	.text.SPI_IntClock_GetModeRegister,"ax",%progbits
 288              		.align	2
 289              		.global	SPI_IntClock_GetModeRegister
 290              		.thumb
 291              		.thumb_func
 292              		.type	SPI_IntClock_GetModeRegister, %function
 293              	SPI_IntClock_GetModeRegister:
 294              	.LFB8:
 370:Generated_Source\PSoC5/SPI_IntClock.c **** }
 371:Generated_Source\PSoC5/SPI_IntClock.c **** 
 372:Generated_Source\PSoC5/SPI_IntClock.c **** 
 373:Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
 374:Generated_Source\PSoC5/SPI_IntClock.c **** * Function Name: SPI_IntClock_GetModeRegister
 375:Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
 376:Generated_Source\PSoC5/SPI_IntClock.c **** *
 377:Generated_Source\PSoC5/SPI_IntClock.c **** * Summary:
 378:Generated_Source\PSoC5/SPI_IntClock.c **** *  Gets the clock mode register value.
 379:Generated_Source\PSoC5/SPI_IntClock.c **** *
 380:Generated_Source\PSoC5/SPI_IntClock.c **** * Parameters:
 381:Generated_Source\PSoC5/SPI_IntClock.c **** *  None
 382:Generated_Source\PSoC5/SPI_IntClock.c **** *
 383:Generated_Source\PSoC5/SPI_IntClock.c **** * Returns:
 384:Generated_Source\PSoC5/SPI_IntClock.c **** *  Bit mask representing the enabled mode bits. See the SetModeRegister and
 385:Generated_Source\PSoC5/SPI_IntClock.c **** *  ClearModeRegister descriptions for details about the mode bits.
 386:Generated_Source\PSoC5/SPI_IntClock.c **** *
 387:Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
 388:Generated_Source\PSoC5/SPI_IntClock.c **** uint8 SPI_IntClock_GetModeRegister(void) 
 389:Generated_Source\PSoC5/SPI_IntClock.c **** {
 295              		.loc 1 389 0
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 13


 296              		.cfi_startproc
 297              		@ args = 0, pretend = 0, frame = 0
 298              		@ frame_needed = 0, uses_anonymous_args = 0
 299              		@ link register save eliminated.
 390:Generated_Source\PSoC5/SPI_IntClock.c ****     return SPI_IntClock_MOD_SRC & (uint8)(SPI_IntClock_MODE_MASK);
 300              		.loc 1 390 0
 301 0000 024B     		ldr	r3, .L27
 302 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 391:Generated_Source\PSoC5/SPI_IntClock.c **** }
 303              		.loc 1 391 0
 304 0004 00F0F800 		and	r0, r0, #248
 305 0008 7047     		bx	lr
 306              	.L28:
 307 000a 00BF     		.align	2
 308              	.L27:
 309 000c 86400040 		.word	1073758342
 310              		.cfi_endproc
 311              	.LFE8:
 312              		.size	SPI_IntClock_GetModeRegister, .-SPI_IntClock_GetModeRegister
 313              		.section	.text.SPI_IntClock_GetSourceRegister,"ax",%progbits
 314              		.align	2
 315              		.global	SPI_IntClock_GetSourceRegister
 316              		.thumb
 317              		.thumb_func
 318              		.type	SPI_IntClock_GetSourceRegister, %function
 319              	SPI_IntClock_GetSourceRegister:
 320              	.LFB10:
 392:Generated_Source\PSoC5/SPI_IntClock.c **** 
 393:Generated_Source\PSoC5/SPI_IntClock.c **** 
 394:Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
 395:Generated_Source\PSoC5/SPI_IntClock.c **** * Function Name: SPI_IntClock_SetSourceRegister
 396:Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
 397:Generated_Source\PSoC5/SPI_IntClock.c **** *
 398:Generated_Source\PSoC5/SPI_IntClock.c **** * Summary:
 399:Generated_Source\PSoC5/SPI_IntClock.c **** *  Sets the input source of the clock. The clock must be disabled before
 400:Generated_Source\PSoC5/SPI_IntClock.c **** *  changing the source. The old and new clock sources must be running.
 401:Generated_Source\PSoC5/SPI_IntClock.c **** *
 402:Generated_Source\PSoC5/SPI_IntClock.c **** * Parameters:
 403:Generated_Source\PSoC5/SPI_IntClock.c **** *  clkSource:  For PSoC 3 and PSoC 5 devices, clkSource should be one of the
 404:Generated_Source\PSoC5/SPI_IntClock.c **** *   following input sources:
 405:Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_SRC_SEL_SYNC_DIG
 406:Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_SRC_SEL_IMO
 407:Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_SRC_SEL_XTALM
 408:Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_SRC_SEL_ILO
 409:Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_SRC_SEL_PLL
 410:Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_SRC_SEL_XTALK
 411:Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_SRC_SEL_DSI_G
 412:Generated_Source\PSoC5/SPI_IntClock.c **** *   - CYCLK_SRC_SEL_DSI_D/CYCLK_SRC_SEL_DSI_A
 413:Generated_Source\PSoC5/SPI_IntClock.c **** *   See the Technical Reference Manual for details on clock sources.
 414:Generated_Source\PSoC5/SPI_IntClock.c **** *
 415:Generated_Source\PSoC5/SPI_IntClock.c **** * Returns:
 416:Generated_Source\PSoC5/SPI_IntClock.c **** *  None
 417:Generated_Source\PSoC5/SPI_IntClock.c **** *
 418:Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
 419:Generated_Source\PSoC5/SPI_IntClock.c **** void SPI_IntClock_SetSourceRegister(uint8 clkSource) 
 420:Generated_Source\PSoC5/SPI_IntClock.c **** {
 421:Generated_Source\PSoC5/SPI_IntClock.c ****     uint16 currDiv = SPI_IntClock_GetDividerRegister();
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 14


 422:Generated_Source\PSoC5/SPI_IntClock.c ****     uint8 oldSrc = SPI_IntClock_GetSourceRegister();
 423:Generated_Source\PSoC5/SPI_IntClock.c **** 
 424:Generated_Source\PSoC5/SPI_IntClock.c ****     if (((oldSrc != ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D)) && 
 425:Generated_Source\PSoC5/SPI_IntClock.c ****         (clkSource == ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D))) && (currDiv == 0u))
 426:Generated_Source\PSoC5/SPI_IntClock.c ****     {
 427:Generated_Source\PSoC5/SPI_IntClock.c ****         /* Switching to Master and divider is 1, set SSS, which will output master, */
 428:Generated_Source\PSoC5/SPI_IntClock.c ****         /* then set the source so we are consistent.                                */
 429:Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_MOD_SRC |= CYCLK_SSS;
 430:Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_MOD_SRC =
 431:Generated_Source\PSoC5/SPI_IntClock.c ****             (SPI_IntClock_MOD_SRC & (uint8)(~SPI_IntClock_SRC_SEL_MSK)) | clkSource;
 432:Generated_Source\PSoC5/SPI_IntClock.c ****     }
 433:Generated_Source\PSoC5/SPI_IntClock.c ****     else if (((oldSrc == ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D)) && 
 434:Generated_Source\PSoC5/SPI_IntClock.c ****             (clkSource != ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D))) && (currDiv == 0u))
 435:Generated_Source\PSoC5/SPI_IntClock.c ****     {
 436:Generated_Source\PSoC5/SPI_IntClock.c ****         /* Switching from Master to not and divider is 1, set source, so we don't   */
 437:Generated_Source\PSoC5/SPI_IntClock.c ****         /* lock when we clear SSS.                                                  */
 438:Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_MOD_SRC =
 439:Generated_Source\PSoC5/SPI_IntClock.c ****             (SPI_IntClock_MOD_SRC & (uint8)(~SPI_IntClock_SRC_SEL_MSK)) | clkSource;
 440:Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_MOD_SRC &= (uint8)(~CYCLK_SSS);
 441:Generated_Source\PSoC5/SPI_IntClock.c ****     }
 442:Generated_Source\PSoC5/SPI_IntClock.c ****     else
 443:Generated_Source\PSoC5/SPI_IntClock.c ****     {
 444:Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_MOD_SRC =
 445:Generated_Source\PSoC5/SPI_IntClock.c ****             (SPI_IntClock_MOD_SRC & (uint8)(~SPI_IntClock_SRC_SEL_MSK)) | clkSource;
 446:Generated_Source\PSoC5/SPI_IntClock.c ****     }
 447:Generated_Source\PSoC5/SPI_IntClock.c **** }
 448:Generated_Source\PSoC5/SPI_IntClock.c **** 
 449:Generated_Source\PSoC5/SPI_IntClock.c **** 
 450:Generated_Source\PSoC5/SPI_IntClock.c **** /*******************************************************************************
 451:Generated_Source\PSoC5/SPI_IntClock.c **** * Function Name: SPI_IntClock_GetSourceRegister
 452:Generated_Source\PSoC5/SPI_IntClock.c **** ********************************************************************************
 453:Generated_Source\PSoC5/SPI_IntClock.c **** *
 454:Generated_Source\PSoC5/SPI_IntClock.c **** * Summary:
 455:Generated_Source\PSoC5/SPI_IntClock.c **** *  Gets the input source of the clock.
 456:Generated_Source\PSoC5/SPI_IntClock.c **** *
 457:Generated_Source\PSoC5/SPI_IntClock.c **** * Parameters:
 458:Generated_Source\PSoC5/SPI_IntClock.c **** *  None
 459:Generated_Source\PSoC5/SPI_IntClock.c **** *
 460:Generated_Source\PSoC5/SPI_IntClock.c **** * Returns:
 461:Generated_Source\PSoC5/SPI_IntClock.c **** *  The input source of the clock. See SetSourceRegister for details.
 462:Generated_Source\PSoC5/SPI_IntClock.c **** *
 463:Generated_Source\PSoC5/SPI_IntClock.c **** *******************************************************************************/
 464:Generated_Source\PSoC5/SPI_IntClock.c **** uint8 SPI_IntClock_GetSourceRegister(void) 
 465:Generated_Source\PSoC5/SPI_IntClock.c **** {
 321              		.loc 1 465 0
 322              		.cfi_startproc
 323              		@ args = 0, pretend = 0, frame = 0
 324              		@ frame_needed = 0, uses_anonymous_args = 0
 325              		@ link register save eliminated.
 466:Generated_Source\PSoC5/SPI_IntClock.c ****     return SPI_IntClock_MOD_SRC & SPI_IntClock_SRC_SEL_MSK;
 326              		.loc 1 466 0
 327 0000 024B     		ldr	r3, .L30
 328 0002 1878     		ldrb	r0, [r3]	@ zero_extendqisi2
 467:Generated_Source\PSoC5/SPI_IntClock.c **** }
 329              		.loc 1 467 0
 330 0004 00F00700 		and	r0, r0, #7
 331 0008 7047     		bx	lr
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 15


 332              	.L31:
 333 000a 00BF     		.align	2
 334              	.L30:
 335 000c 86400040 		.word	1073758342
 336              		.cfi_endproc
 337              	.LFE10:
 338              		.size	SPI_IntClock_GetSourceRegister, .-SPI_IntClock_GetSourceRegister
 339              		.section	.text.SPI_IntClock_SetDividerRegister,"ax",%progbits
 340              		.align	2
 341              		.global	SPI_IntClock_SetDividerRegister
 342              		.thumb
 343              		.thumb_func
 344              		.type	SPI_IntClock_SetDividerRegister, %function
 345              	SPI_IntClock_SetDividerRegister:
 346              	.LFB4:
 195:Generated_Source\PSoC5/SPI_IntClock.c ****     uint8 enabled;
 347              		.loc 1 195 0
 348              		.cfi_startproc
 349              		@ args = 0, pretend = 0, frame = 0
 350              		@ frame_needed = 0, uses_anonymous_args = 0
 351              	.LVL7:
 352 0000 70B5     		push	{r4, r5, r6, lr}
 353              		.cfi_def_cfa_offset 16
 354              		.cfi_offset 4, -16
 355              		.cfi_offset 5, -12
 356              		.cfi_offset 6, -8
 357              		.cfi_offset 14, -4
 358 0002 0446     		mov	r4, r0
 359 0004 0D46     		mov	r5, r1
 198:Generated_Source\PSoC5/SPI_IntClock.c ****     uint16 oldDivider = SPI_IntClock_GetDividerRegister();
 360              		.loc 1 198 0
 361 0006 FFF7FEFF 		bl	SPI_IntClock_GetSourceRegister
 362              	.LVL8:
 363 000a 0646     		mov	r6, r0
 364              	.LVL9:
 199:Generated_Source\PSoC5/SPI_IntClock.c **** 
 365              		.loc 1 199 0
 366 000c FFF7FEFF 		bl	SPI_IntClock_GetDividerRegister
 367              	.LVL10:
 201:Generated_Source\PSoC5/SPI_IntClock.c ****     {
 368              		.loc 1 201 0
 369 0010 A042     		cmp	r0, r4
 370 0012 57D0     		beq	.L32
 203:Generated_Source\PSoC5/SPI_IntClock.c **** 
 371              		.loc 1 203 0
 372 0014 2C4B     		ldr	r3, .L45
 373 0016 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 374 0018 03F00203 		and	r3, r3, #2
 375 001c DAB2     		uxtb	r2, r3
 376              	.LVL11:
 205:Generated_Source\PSoC5/SPI_IntClock.c ****         {
 377              		.loc 1 205 0
 378 001e 96B9     		cbnz	r6, .L34
 205:Generated_Source\PSoC5/SPI_IntClock.c ****         {
 379              		.loc 1 205 0 is_stmt 0 discriminator 1
 380 0020 00B1     		cbz	r0, .L35
 205:Generated_Source\PSoC5/SPI_IntClock.c ****         {
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 16


 381              		.loc 1 205 0 discriminator 2
 382 0022 84B9     		cbnz	r4, .L34
 383              	.L35:
 208:Generated_Source\PSoC5/SPI_IntClock.c ****             {
 384              		.loc 1 208 0 is_stmt 1
 385 0024 38B9     		cbnz	r0, .L36
 213:Generated_Source\PSoC5/SPI_IntClock.c ****                 SPI_IntClock_MOD_SRC &= (uint8)(~CYCLK_SSS);
 386              		.loc 1 213 0
 387 0026 294B     		ldr	r3, .L45+4
 388 0028 1C80     		strh	r4, [r3]	@ movhi
 214:Generated_Source\PSoC5/SPI_IntClock.c ****             }
 389              		.loc 1 214 0
 390 002a 294A     		ldr	r2, .L45+8
 391              	.LVL12:
 392 002c 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 393 002e 03F0BF03 		and	r3, r3, #191
 394 0032 1370     		strb	r3, [r2]
 395 0034 70BD     		pop	{r4, r5, r6, pc}
 396              	.LVL13:
 397              	.L36:
 220:Generated_Source\PSoC5/SPI_IntClock.c ****                 CY_SET_REG16(SPI_IntClock_DIV_PTR, clkDivider);
 398              		.loc 1 220 0
 399 0036 264A     		ldr	r2, .L45+8
 400              	.LVL14:
 401 0038 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 402              	.LVL15:
 403 003a 43F04003 		orr	r3, r3, #64
 404 003e 1370     		strb	r3, [r2]
 221:Generated_Source\PSoC5/SPI_IntClock.c ****             }
 405              		.loc 1 221 0
 406 0040 224B     		ldr	r3, .L45+4
 407 0042 1C80     		strh	r4, [r3]	@ movhi
 408 0044 70BD     		pop	{r4, r5, r6, pc}
 409              	.LVL16:
 410              	.L34:
 227:Generated_Source\PSoC5/SPI_IntClock.c ****             {
 411              		.loc 1 227 0
 412 0046 22B3     		cbz	r2, .L37
 229:Generated_Source\PSoC5/SPI_IntClock.c **** 
 413              		.loc 1 229 0
 414 0048 0023     		movs	r3, #0
 415 004a 2249     		ldr	r1, .L45+12
 416 004c 0B70     		strb	r3, [r1]
 236:Generated_Source\PSoC5/SPI_IntClock.c ****                 CLK_DIST_AMASK = 0x00u;
 417              		.loc 1 236 0
 418 004e 0226     		movs	r6, #2
 419              	.LVL17:
 420 0050 0F31     		adds	r1, r1, #15
 421 0052 0E70     		strb	r6, [r1]
 237:Generated_Source\PSoC5/SPI_IntClock.c **** #endif /* SPI_IntClock__CFG3 */
 422              		.loc 1 237 0
 423 0054 0431     		adds	r1, r1, #4
 424 0056 0B70     		strb	r3, [r1]
 240:Generated_Source\PSoC5/SPI_IntClock.c **** 
 425              		.loc 1 240 0
 426 0058 0C39     		subs	r1, r1, #12
 427 005a 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 17


 428 005c 03F07F03 		and	r3, r3, #127
 429 0060 0B70     		strb	r3, [r1]
 243:Generated_Source\PSoC5/SPI_IntClock.c ****                 {
 430              		.loc 1 243 0
 431 0062 1B4B     		ldr	r3, .L45+8
 432 0064 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 433 0066 13F0080F 		tst	r3, #8
 434 006a 00D0     		beq	.L38
 243:Generated_Source\PSoC5/SPI_IntClock.c ****                 {
 435              		.loc 1 243 0 is_stmt 0 discriminator 1
 436 006c 8CB9     		cbnz	r4, .L37
 437              	.L38:
 246:Generated_Source\PSoC5/SPI_IntClock.c ****                     CLK_DIST_LD = CYCLK_LD_DISABLE|CYCLK_LD_SYNC_EN|CYCLK_LD_LOAD;
 438              		.loc 1 246 0 is_stmt 1
 439 006e 1A4B     		ldr	r3, .L45+16
 440 0070 1880     		strh	r0, [r3]	@ movhi
 247:Generated_Source\PSoC5/SPI_IntClock.c **** 
 441              		.loc 1 247 0
 442 0072 0721     		movs	r1, #7
 443 0074 013B     		subs	r3, r3, #1
 444 0076 1970     		strb	r1, [r3]
 445              	.L39:
 250:Generated_Source\PSoC5/SPI_IntClock.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 446              		.loc 1 250 0 discriminator 1
 447 0078 164B     		ldr	r3, .L45+12
 448 007a 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 449 007c 13F0010F 		tst	r3, #1
 450 0080 FAD1     		bne	.L39
 253:Generated_Source\PSoC5/SPI_IntClock.c **** 
 451              		.loc 1 253 0
 452 0082 1149     		ldr	r1, .L45
 453 0084 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 454 0086 03F0FD03 		and	r3, r3, #253
 455 008a 0B70     		strb	r3, [r1]
 257:Generated_Source\PSoC5/SPI_IntClock.c **** #endif /* HAS_CLKDIST_LD_DISABLE */
 456              		.loc 1 257 0
 457 008c 0021     		movs	r1, #0
 458 008e 114B     		ldr	r3, .L45+12
 459 0090 1970     		strb	r1, [r3]
 460              	.L37:
 263:Generated_Source\PSoC5/SPI_IntClock.c ****             {
 461              		.loc 1 263 0
 462 0092 0D4B     		ldr	r3, .L45
 463 0094 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 464 0096 13F0020F 		tst	r3, #2
 465 009a 0DD0     		beq	.L40
 266:Generated_Source\PSoC5/SPI_IntClock.c **** 
 466              		.loc 1 266 0
 467 009c 0E4B     		ldr	r3, .L45+16
 468 009e 1C80     		strh	r4, [r3]	@ movhi
 268:Generated_Source\PSoC5/SPI_IntClock.c ****                 while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 469              		.loc 1 268 0
 470 00a0 0DB1     		cbz	r5, .L43
 471 00a2 0322     		movs	r2, #3
 472              	.LVL18:
 473 00a4 00E0     		b	.L41
 474              	.LVL19:
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 18


 475              	.L43:
 476 00a6 0122     		movs	r2, #1
 477              	.LVL20:
 478              	.L41:
 268:Generated_Source\PSoC5/SPI_IntClock.c ****                 while ((CLK_DIST_LD & CYCLK_LD_LOAD) != 0u) { }
 479              		.loc 1 268 0 is_stmt 0 discriminator 4
 480 00a8 0A4B     		ldr	r3, .L45+12
 481 00aa 1A70     		strb	r2, [r3]
 482              	.L42:
 269:Generated_Source\PSoC5/SPI_IntClock.c ****             }
 483              		.loc 1 269 0 is_stmt 1 discriminator 1
 484 00ac 094B     		ldr	r3, .L45+12
 485 00ae 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 486 00b0 13F0010F 		tst	r3, #1
 487 00b4 FAD1     		bne	.L42
 488 00b6 70BD     		pop	{r4, r5, r6, pc}
 489              	.LVL21:
 490              	.L40:
 274:Generated_Source\PSoC5/SPI_IntClock.c **** 				SPI_IntClock_CLKEN |= enabled;
 491              		.loc 1 274 0
 492 00b8 044B     		ldr	r3, .L45+4
 493 00ba 1C80     		strh	r4, [r3]	@ movhi
 275:Generated_Source\PSoC5/SPI_IntClock.c ****             }
 494              		.loc 1 275 0
 495 00bc 0249     		ldr	r1, .L45
 496 00be 0B78     		ldrb	r3, [r1]	@ zero_extendqisi2
 497 00c0 1343     		orrs	r3, r3, r2
 498 00c2 0B70     		strb	r3, [r1]
 499              	.LVL22:
 500              	.L32:
 501 00c4 70BD     		pop	{r4, r5, r6, pc}
 502              	.L46:
 503 00c6 00BF     		.align	2
 504              	.L45:
 505 00c8 A2430040 		.word	1073759138
 506 00cc 84400040 		.word	1073758340
 507 00d0 86400040 		.word	1073758342
 508 00d4 01400040 		.word	1073758209
 509 00d8 02400040 		.word	1073758210
 510              		.cfi_endproc
 511              	.LFE4:
 512              		.size	SPI_IntClock_SetDividerRegister, .-SPI_IntClock_SetDividerRegister
 513              		.section	.text.SPI_IntClock_SetSourceRegister,"ax",%progbits
 514              		.align	2
 515              		.global	SPI_IntClock_SetSourceRegister
 516              		.thumb
 517              		.thumb_func
 518              		.type	SPI_IntClock_SetSourceRegister, %function
 519              	SPI_IntClock_SetSourceRegister:
 520              	.LFB9:
 420:Generated_Source\PSoC5/SPI_IntClock.c ****     uint16 currDiv = SPI_IntClock_GetDividerRegister();
 521              		.loc 1 420 0
 522              		.cfi_startproc
 523              		@ args = 0, pretend = 0, frame = 0
 524              		@ frame_needed = 0, uses_anonymous_args = 0
 525              	.LVL23:
 526 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 19


 527              		.cfi_def_cfa_offset 16
 528              		.cfi_offset 3, -16
 529              		.cfi_offset 4, -12
 530              		.cfi_offset 5, -8
 531              		.cfi_offset 14, -4
 532 0002 0446     		mov	r4, r0
 421:Generated_Source\PSoC5/SPI_IntClock.c ****     uint8 oldSrc = SPI_IntClock_GetSourceRegister();
 533              		.loc 1 421 0
 534 0004 FFF7FEFF 		bl	SPI_IntClock_GetDividerRegister
 535              	.LVL24:
 536 0008 0546     		mov	r5, r0
 537              	.LVL25:
 422:Generated_Source\PSoC5/SPI_IntClock.c **** 
 538              		.loc 1 422 0
 539 000a FFF7FEFF 		bl	SPI_IntClock_GetSourceRegister
 540              	.LVL26:
 424:Generated_Source\PSoC5/SPI_IntClock.c ****         (clkSource == ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D))) && (currDiv == 0u))
 541              		.loc 1 424 0
 542 000e 0346     		mov	r3, r0
 543 0010 60B1     		cbz	r0, .L48
 424:Generated_Source\PSoC5/SPI_IntClock.c ****         (clkSource == ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D))) && (currDiv == 0u))
 544              		.loc 1 424 0 is_stmt 0 discriminator 1
 545 0012 5CB9     		cbnz	r4, .L48
 425:Generated_Source\PSoC5/SPI_IntClock.c ****     {
 546              		.loc 1 425 0 is_stmt 1
 547 0014 55B9     		cbnz	r5, .L48
 429:Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_MOD_SRC =
 548              		.loc 1 429 0
 549 0016 104A     		ldr	r2, .L52
 550 0018 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 551 001a 43F04003 		orr	r3, r3, #64
 552 001e 1370     		strb	r3, [r2]
 431:Generated_Source\PSoC5/SPI_IntClock.c ****     }
 553              		.loc 1 431 0
 554 0020 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 430:Generated_Source\PSoC5/SPI_IntClock.c ****             (SPI_IntClock_MOD_SRC & (uint8)(~SPI_IntClock_SRC_SEL_MSK)) | clkSource;
 555              		.loc 1 430 0
 556 0022 03F0F803 		and	r3, r3, #248
 557 0026 1C43     		orrs	r4, r4, r3
 558 0028 1470     		strb	r4, [r2]
 559 002a 38BD     		pop	{r3, r4, r5, pc}
 560              	.LVL27:
 561              	.L48:
 433:Generated_Source\PSoC5/SPI_IntClock.c ****             (clkSource != ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D))) && (currDiv == 0u))
 562              		.loc 1 433 0
 563 002c 63B9     		cbnz	r3, .L50
 433:Generated_Source\PSoC5/SPI_IntClock.c ****             (clkSource != ((uint8)CYCLK_SRC_SEL_CLK_SYNC_D))) && (currDiv == 0u))
 564              		.loc 1 433 0 is_stmt 0 discriminator 1
 565 002e 5CB1     		cbz	r4, .L50
 434:Generated_Source\PSoC5/SPI_IntClock.c ****     {
 566              		.loc 1 434 0 is_stmt 1
 567 0030 55B9     		cbnz	r5, .L50
 439:Generated_Source\PSoC5/SPI_IntClock.c ****         SPI_IntClock_MOD_SRC &= (uint8)(~CYCLK_SSS);
 568              		.loc 1 439 0
 569 0032 094A     		ldr	r2, .L52
 570 0034 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 438:Generated_Source\PSoC5/SPI_IntClock.c ****             (SPI_IntClock_MOD_SRC & (uint8)(~SPI_IntClock_SRC_SEL_MSK)) | clkSource;
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 20


 571              		.loc 1 438 0
 572 0036 03F0F803 		and	r3, r3, #248
 573 003a 1C43     		orrs	r4, r4, r3
 574 003c 1470     		strb	r4, [r2]
 440:Generated_Source\PSoC5/SPI_IntClock.c ****     }
 575              		.loc 1 440 0
 576 003e 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 577 0040 03F0BF03 		and	r3, r3, #191
 578 0044 1370     		strb	r3, [r2]
 579 0046 38BD     		pop	{r3, r4, r5, pc}
 580              	.LVL28:
 581              	.L50:
 445:Generated_Source\PSoC5/SPI_IntClock.c ****     }
 582              		.loc 1 445 0
 583 0048 034A     		ldr	r2, .L52
 584 004a 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
 444:Generated_Source\PSoC5/SPI_IntClock.c ****             (SPI_IntClock_MOD_SRC & (uint8)(~SPI_IntClock_SRC_SEL_MSK)) | clkSource;
 585              		.loc 1 444 0
 586 004c 03F0F803 		and	r3, r3, #248
 587 0050 1C43     		orrs	r4, r4, r3
 588 0052 1470     		strb	r4, [r2]
 589 0054 38BD     		pop	{r3, r4, r5, pc}
 590              	.LVL29:
 591              	.L53:
 592 0056 00BF     		.align	2
 593              	.L52:
 594 0058 86400040 		.word	1073758342
 595              		.cfi_endproc
 596              	.LFE9:
 597              		.size	SPI_IntClock_SetSourceRegister, .-SPI_IntClock_SetSourceRegister
 598              		.text
 599              	.Letext0:
 600              		.file 2 "Generated_Source\\PSoC5/cytypes.h"
 601              		.section	.debug_info,"",%progbits
 602              	.Ldebug_info0:
 603 0000 7F020000 		.4byte	0x27f
 604 0004 0400     		.2byte	0x4
 605 0006 00000000 		.4byte	.Ldebug_abbrev0
 606 000a 04       		.byte	0x4
 607 000b 01       		.uleb128 0x1
 608 000c 1C020000 		.4byte	.LASF36
 609 0010 0C       		.byte	0xc
 610 0011 F4000000 		.4byte	.LASF37
 611 0015 AA020000 		.4byte	.LASF38
 612 0019 00000000 		.4byte	.Ldebug_ranges0+0
 613 001d 00000000 		.4byte	0
 614 0021 00000000 		.4byte	.Ldebug_line0
 615 0025 02       		.uleb128 0x2
 616 0026 01       		.byte	0x1
 617 0027 06       		.byte	0x6
 618 0028 5E010000 		.4byte	.LASF0
 619 002c 02       		.uleb128 0x2
 620 002d 01       		.byte	0x1
 621 002e 08       		.byte	0x8
 622 002f 44010000 		.4byte	.LASF1
 623 0033 02       		.uleb128 0x2
 624 0034 02       		.byte	0x2
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 21


 625 0035 05       		.byte	0x5
 626 0036 28000000 		.4byte	.LASF2
 627 003a 02       		.uleb128 0x2
 628 003b 02       		.byte	0x2
 629 003c 07       		.byte	0x7
 630 003d 8E010000 		.4byte	.LASF3
 631 0041 02       		.uleb128 0x2
 632 0042 04       		.byte	0x4
 633 0043 05       		.byte	0x5
 634 0044 EB000000 		.4byte	.LASF4
 635 0048 02       		.uleb128 0x2
 636 0049 04       		.byte	0x4
 637 004a 07       		.byte	0x7
 638 004b C8010000 		.4byte	.LASF5
 639 004f 02       		.uleb128 0x2
 640 0050 08       		.byte	0x8
 641 0051 05       		.byte	0x5
 642 0052 DD000000 		.4byte	.LASF6
 643 0056 02       		.uleb128 0x2
 644 0057 08       		.byte	0x8
 645 0058 07       		.byte	0x7
 646 0059 6A010000 		.4byte	.LASF7
 647 005d 03       		.uleb128 0x3
 648 005e 04       		.byte	0x4
 649 005f 05       		.byte	0x5
 650 0060 696E7400 		.ascii	"int\000"
 651 0064 02       		.uleb128 0x2
 652 0065 04       		.byte	0x4
 653 0066 07       		.byte	0x7
 654 0067 81010000 		.4byte	.LASF8
 655 006b 04       		.uleb128 0x4
 656 006c 92000000 		.4byte	.LASF9
 657 0070 02       		.byte	0x2
 658 0071 E401     		.2byte	0x1e4
 659 0073 2C000000 		.4byte	0x2c
 660 0077 04       		.uleb128 0x4
 661 0078 63000000 		.4byte	.LASF10
 662 007c 02       		.byte	0x2
 663 007d E501     		.2byte	0x1e5
 664 007f 3A000000 		.4byte	0x3a
 665 0083 02       		.uleb128 0x2
 666 0084 04       		.byte	0x4
 667 0085 04       		.byte	0x4
 668 0086 C0000000 		.4byte	.LASF11
 669 008a 02       		.uleb128 0x2
 670 008b 08       		.byte	0x8
 671 008c 04       		.byte	0x4
 672 008d DA010000 		.4byte	.LASF12
 673 0091 02       		.uleb128 0x2
 674 0092 01       		.byte	0x1
 675 0093 08       		.byte	0x8
 676 0094 A1010000 		.4byte	.LASF13
 677 0098 04       		.uleb128 0x4
 678 0099 C3010000 		.4byte	.LASF14
 679 009d 02       		.byte	0x2
 680 009e 8E02     		.2byte	0x28e
 681 00a0 A4000000 		.4byte	0xa4
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 22


 682 00a4 05       		.uleb128 0x5
 683 00a5 6B000000 		.4byte	0x6b
 684 00a9 04       		.uleb128 0x4
 685 00aa 22000000 		.4byte	.LASF15
 686 00ae 02       		.byte	0x2
 687 00af 8F02     		.2byte	0x28f
 688 00b1 B5000000 		.4byte	0xb5
 689 00b5 05       		.uleb128 0x5
 690 00b6 77000000 		.4byte	0x77
 691 00ba 06       		.uleb128 0x6
 692 00bb E1010000 		.4byte	.LASF16
 693 00bf 01       		.byte	0x1
 694 00c0 2D       		.byte	0x2d
 695 00c1 00000000 		.4byte	.LFB0
 696 00c5 1C000000 		.4byte	.LFE0-.LFB0
 697 00c9 01       		.uleb128 0x1
 698 00ca 9C       		.byte	0x9c
 699 00cb 06       		.uleb128 0x6
 700 00cc 51000000 		.4byte	.LASF17
 701 00d0 01       		.byte	0x1
 702 00d1 47       		.byte	0x47
 703 00d2 00000000 		.4byte	.LFB1
 704 00d6 1C000000 		.4byte	.LFE1-.LFB1
 705 00da 01       		.uleb128 0x1
 706 00db 9C       		.byte	0x9c
 707 00dc 07       		.uleb128 0x7
 708 00dd C6000000 		.4byte	.LASF18
 709 00e1 01       		.byte	0x1
 710 00e2 64       		.byte	0x64
 711 00e3 00000000 		.4byte	.LFB2
 712 00e7 6C000000 		.4byte	.LFE2-.LFB2
 713 00eb 01       		.uleb128 0x1
 714 00ec 9C       		.byte	0x9c
 715 00ed 0B010000 		.4byte	0x10b
 716 00f1 08       		.uleb128 0x8
 717 00f2 0A000000 		.4byte	.LBB2
 718 00f6 62000000 		.4byte	.LBE2-.LBB2
 719 00fa 09       		.uleb128 0x9
 720 00fb B8010000 		.4byte	.LASF30
 721 00ff 01       		.byte	0x1
 722 0100 69       		.byte	0x69
 723 0101 77000000 		.4byte	0x77
 724 0105 00000000 		.4byte	.LLST0
 725 0109 00       		.byte	0
 726 010a 00       		.byte	0
 727 010b 07       		.uleb128 0x7
 728 010c 00000000 		.4byte	.LASF19
 729 0110 01       		.byte	0x1
 730 0111 9D       		.byte	0x9d
 731 0112 00000000 		.4byte	.LFB3
 732 0116 20000000 		.4byte	.LFE3-.LFB3
 733 011a 01       		.uleb128 0x1
 734 011b 9C       		.byte	0x9c
 735 011c 2E010000 		.4byte	0x12e
 736 0120 0A       		.uleb128 0xa
 737 0121 21010000 		.4byte	.LASF21
 738 0125 01       		.byte	0x1
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 23


 739 0126 9D       		.byte	0x9d
 740 0127 6B000000 		.4byte	0x6b
 741 012b 01       		.uleb128 0x1
 742 012c 50       		.byte	0x50
 743 012d 00       		.byte	0
 744 012e 0B       		.uleb128 0xb
 745 012f FC010000 		.4byte	.LASF24
 746 0133 01       		.byte	0x1
 747 0134 2901     		.2byte	0x129
 748 0136 77000000 		.4byte	0x77
 749 013a 00000000 		.4byte	.LFB5
 750 013e 0C000000 		.4byte	.LFE5-.LFB5
 751 0142 01       		.uleb128 0x1
 752 0143 9C       		.byte	0x9c
 753 0144 0C       		.uleb128 0xc
 754 0145 27010000 		.4byte	.LASF20
 755 0149 01       		.byte	0x1
 756 014a 4C01     		.2byte	0x14c
 757 014c 00000000 		.4byte	.LFB6
 758 0150 14000000 		.4byte	.LFE6-.LFB6
 759 0154 01       		.uleb128 0x1
 760 0155 9C       		.byte	0x9c
 761 0156 6B010000 		.4byte	0x16b
 762 015a 0D       		.uleb128 0xd
 763 015b 52010000 		.4byte	.LASF22
 764 015f 01       		.byte	0x1
 765 0160 4C01     		.2byte	0x14c
 766 0162 6B000000 		.4byte	0x6b
 767 0166 13000000 		.4byte	.LLST1
 768 016a 00       		.byte	0
 769 016b 0C       		.uleb128 0xc
 770 016c 32000000 		.4byte	.LASF23
 771 0170 01       		.byte	0x1
 772 0171 6F01     		.2byte	0x16f
 773 0173 00000000 		.4byte	.LFB7
 774 0177 18000000 		.4byte	.LFE7-.LFB7
 775 017b 01       		.uleb128 0x1
 776 017c 9C       		.byte	0x9c
 777 017d 92010000 		.4byte	0x192
 778 0181 0D       		.uleb128 0xd
 779 0182 52010000 		.4byte	.LASF22
 780 0186 01       		.byte	0x1
 781 0187 6F01     		.2byte	0x16f
 782 0189 6B000000 		.4byte	0x6b
 783 018d 34000000 		.4byte	.LLST2
 784 0191 00       		.byte	0
 785 0192 0B       		.uleb128 0xb
 786 0193 A3000000 		.4byte	.LASF25
 787 0197 01       		.byte	0x1
 788 0198 8401     		.2byte	0x184
 789 019a 6B000000 		.4byte	0x6b
 790 019e 00000000 		.4byte	.LFB8
 791 01a2 10000000 		.4byte	.LFE8-.LFB8
 792 01a6 01       		.uleb128 0x1
 793 01a7 9C       		.byte	0x9c
 794 01a8 0B       		.uleb128 0xb
 795 01a9 F3020000 		.4byte	.LASF26
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 24


 796 01ad 01       		.byte	0x1
 797 01ae D001     		.2byte	0x1d0
 798 01b0 6B000000 		.4byte	0x6b
 799 01b4 00000000 		.4byte	.LFB10
 800 01b8 10000000 		.4byte	.LFE10-.LFB10
 801 01bc 01       		.uleb128 0x1
 802 01bd 9C       		.byte	0x9c
 803 01be 07       		.uleb128 0x7
 804 01bf 72000000 		.4byte	.LASF27
 805 01c3 01       		.byte	0x1
 806 01c4 C1       		.byte	0xc1
 807 01c5 00000000 		.4byte	.LFB4
 808 01c9 DC000000 		.4byte	.LFE4-.LFB4
 809 01cd 01       		.uleb128 0x1
 810 01ce 9C       		.byte	0x9c
 811 01cf 2F020000 		.4byte	0x22f
 812 01d3 0E       		.uleb128 0xe
 813 01d4 98000000 		.4byte	.LASF28
 814 01d8 01       		.byte	0x1
 815 01d9 C1       		.byte	0xc1
 816 01da 77000000 		.4byte	0x77
 817 01de 55000000 		.4byte	.LLST3
 818 01e2 0E       		.uleb128 0xe
 819 01e3 6A000000 		.4byte	.LASF29
 820 01e7 01       		.byte	0x1
 821 01e8 C1       		.byte	0xc1
 822 01e9 6B000000 		.4byte	0x6b
 823 01ed 76000000 		.4byte	.LLST4
 824 01f1 09       		.uleb128 0x9
 825 01f2 F4010000 		.4byte	.LASF31
 826 01f6 01       		.byte	0x1
 827 01f7 C4       		.byte	0xc4
 828 01f8 6B000000 		.4byte	0x6b
 829 01fc 97000000 		.4byte	.LLST5
 830 0200 09       		.uleb128 0x9
 831 0201 B0010000 		.4byte	.LASF32
 832 0205 01       		.byte	0x1
 833 0206 C6       		.byte	0xc6
 834 0207 6B000000 		.4byte	0x6b
 835 020b E1000000 		.4byte	.LLST6
 836 020f 0F       		.uleb128 0xf
 837 0210 B8010000 		.4byte	.LASF30
 838 0214 01       		.byte	0x1
 839 0215 C7       		.byte	0xc7
 840 0216 77000000 		.4byte	0x77
 841 021a 01       		.uleb128 0x1
 842 021b 50       		.byte	0x50
 843 021c 10       		.uleb128 0x10
 844 021d 0A000000 		.4byte	.LVL8
 845 0221 A8010000 		.4byte	0x1a8
 846 0225 10       		.uleb128 0x10
 847 0226 10000000 		.4byte	.LVL10
 848 022a 2E010000 		.4byte	0x12e
 849 022e 00       		.byte	0
 850 022f 11       		.uleb128 0x11
 851 0230 12030000 		.4byte	.LASF39
 852 0234 01       		.byte	0x1
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 25


 853 0235 A301     		.2byte	0x1a3
 854 0237 00000000 		.4byte	.LFB9
 855 023b 5C000000 		.4byte	.LFE9-.LFB9
 856 023f 01       		.uleb128 0x1
 857 0240 9C       		.byte	0x9c
 858 0241 0D       		.uleb128 0xd
 859 0242 A6010000 		.4byte	.LASF33
 860 0246 01       		.byte	0x1
 861 0247 A301     		.2byte	0x1a3
 862 0249 6B000000 		.4byte	0x6b
 863 024d F4000000 		.4byte	.LLST7
 864 0251 12       		.uleb128 0x12
 865 0252 1A000000 		.4byte	.LASF34
 866 0256 01       		.byte	0x1
 867 0257 A501     		.2byte	0x1a5
 868 0259 77000000 		.4byte	0x77
 869 025d 15010000 		.4byte	.LLST8
 870 0261 13       		.uleb128 0x13
 871 0262 1A010000 		.4byte	.LASF35
 872 0266 01       		.byte	0x1
 873 0267 A601     		.2byte	0x1a6
 874 0269 6B000000 		.4byte	0x6b
 875 026d 01       		.uleb128 0x1
 876 026e 50       		.byte	0x50
 877 026f 10       		.uleb128 0x10
 878 0270 08000000 		.4byte	.LVL24
 879 0274 2E010000 		.4byte	0x12e
 880 0278 10       		.uleb128 0x10
 881 0279 0E000000 		.4byte	.LVL26
 882 027d A8010000 		.4byte	0x1a8
 883 0281 00       		.byte	0
 884 0282 00       		.byte	0
 885              		.section	.debug_abbrev,"",%progbits
 886              	.Ldebug_abbrev0:
 887 0000 01       		.uleb128 0x1
 888 0001 11       		.uleb128 0x11
 889 0002 01       		.byte	0x1
 890 0003 25       		.uleb128 0x25
 891 0004 0E       		.uleb128 0xe
 892 0005 13       		.uleb128 0x13
 893 0006 0B       		.uleb128 0xb
 894 0007 03       		.uleb128 0x3
 895 0008 0E       		.uleb128 0xe
 896 0009 1B       		.uleb128 0x1b
 897 000a 0E       		.uleb128 0xe
 898 000b 55       		.uleb128 0x55
 899 000c 17       		.uleb128 0x17
 900 000d 11       		.uleb128 0x11
 901 000e 01       		.uleb128 0x1
 902 000f 10       		.uleb128 0x10
 903 0010 17       		.uleb128 0x17
 904 0011 00       		.byte	0
 905 0012 00       		.byte	0
 906 0013 02       		.uleb128 0x2
 907 0014 24       		.uleb128 0x24
 908 0015 00       		.byte	0
 909 0016 0B       		.uleb128 0xb
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 26


 910 0017 0B       		.uleb128 0xb
 911 0018 3E       		.uleb128 0x3e
 912 0019 0B       		.uleb128 0xb
 913 001a 03       		.uleb128 0x3
 914 001b 0E       		.uleb128 0xe
 915 001c 00       		.byte	0
 916 001d 00       		.byte	0
 917 001e 03       		.uleb128 0x3
 918 001f 24       		.uleb128 0x24
 919 0020 00       		.byte	0
 920 0021 0B       		.uleb128 0xb
 921 0022 0B       		.uleb128 0xb
 922 0023 3E       		.uleb128 0x3e
 923 0024 0B       		.uleb128 0xb
 924 0025 03       		.uleb128 0x3
 925 0026 08       		.uleb128 0x8
 926 0027 00       		.byte	0
 927 0028 00       		.byte	0
 928 0029 04       		.uleb128 0x4
 929 002a 16       		.uleb128 0x16
 930 002b 00       		.byte	0
 931 002c 03       		.uleb128 0x3
 932 002d 0E       		.uleb128 0xe
 933 002e 3A       		.uleb128 0x3a
 934 002f 0B       		.uleb128 0xb
 935 0030 3B       		.uleb128 0x3b
 936 0031 05       		.uleb128 0x5
 937 0032 49       		.uleb128 0x49
 938 0033 13       		.uleb128 0x13
 939 0034 00       		.byte	0
 940 0035 00       		.byte	0
 941 0036 05       		.uleb128 0x5
 942 0037 35       		.uleb128 0x35
 943 0038 00       		.byte	0
 944 0039 49       		.uleb128 0x49
 945 003a 13       		.uleb128 0x13
 946 003b 00       		.byte	0
 947 003c 00       		.byte	0
 948 003d 06       		.uleb128 0x6
 949 003e 2E       		.uleb128 0x2e
 950 003f 00       		.byte	0
 951 0040 3F       		.uleb128 0x3f
 952 0041 19       		.uleb128 0x19
 953 0042 03       		.uleb128 0x3
 954 0043 0E       		.uleb128 0xe
 955 0044 3A       		.uleb128 0x3a
 956 0045 0B       		.uleb128 0xb
 957 0046 3B       		.uleb128 0x3b
 958 0047 0B       		.uleb128 0xb
 959 0048 27       		.uleb128 0x27
 960 0049 19       		.uleb128 0x19
 961 004a 11       		.uleb128 0x11
 962 004b 01       		.uleb128 0x1
 963 004c 12       		.uleb128 0x12
 964 004d 06       		.uleb128 0x6
 965 004e 40       		.uleb128 0x40
 966 004f 18       		.uleb128 0x18
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 27


 967 0050 9742     		.uleb128 0x2117
 968 0052 19       		.uleb128 0x19
 969 0053 00       		.byte	0
 970 0054 00       		.byte	0
 971 0055 07       		.uleb128 0x7
 972 0056 2E       		.uleb128 0x2e
 973 0057 01       		.byte	0x1
 974 0058 3F       		.uleb128 0x3f
 975 0059 19       		.uleb128 0x19
 976 005a 03       		.uleb128 0x3
 977 005b 0E       		.uleb128 0xe
 978 005c 3A       		.uleb128 0x3a
 979 005d 0B       		.uleb128 0xb
 980 005e 3B       		.uleb128 0x3b
 981 005f 0B       		.uleb128 0xb
 982 0060 27       		.uleb128 0x27
 983 0061 19       		.uleb128 0x19
 984 0062 11       		.uleb128 0x11
 985 0063 01       		.uleb128 0x1
 986 0064 12       		.uleb128 0x12
 987 0065 06       		.uleb128 0x6
 988 0066 40       		.uleb128 0x40
 989 0067 18       		.uleb128 0x18
 990 0068 9742     		.uleb128 0x2117
 991 006a 19       		.uleb128 0x19
 992 006b 01       		.uleb128 0x1
 993 006c 13       		.uleb128 0x13
 994 006d 00       		.byte	0
 995 006e 00       		.byte	0
 996 006f 08       		.uleb128 0x8
 997 0070 0B       		.uleb128 0xb
 998 0071 01       		.byte	0x1
 999 0072 11       		.uleb128 0x11
 1000 0073 01       		.uleb128 0x1
 1001 0074 12       		.uleb128 0x12
 1002 0075 06       		.uleb128 0x6
 1003 0076 00       		.byte	0
 1004 0077 00       		.byte	0
 1005 0078 09       		.uleb128 0x9
 1006 0079 34       		.uleb128 0x34
 1007 007a 00       		.byte	0
 1008 007b 03       		.uleb128 0x3
 1009 007c 0E       		.uleb128 0xe
 1010 007d 3A       		.uleb128 0x3a
 1011 007e 0B       		.uleb128 0xb
 1012 007f 3B       		.uleb128 0x3b
 1013 0080 0B       		.uleb128 0xb
 1014 0081 49       		.uleb128 0x49
 1015 0082 13       		.uleb128 0x13
 1016 0083 02       		.uleb128 0x2
 1017 0084 17       		.uleb128 0x17
 1018 0085 00       		.byte	0
 1019 0086 00       		.byte	0
 1020 0087 0A       		.uleb128 0xa
 1021 0088 05       		.uleb128 0x5
 1022 0089 00       		.byte	0
 1023 008a 03       		.uleb128 0x3
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 28


 1024 008b 0E       		.uleb128 0xe
 1025 008c 3A       		.uleb128 0x3a
 1026 008d 0B       		.uleb128 0xb
 1027 008e 3B       		.uleb128 0x3b
 1028 008f 0B       		.uleb128 0xb
 1029 0090 49       		.uleb128 0x49
 1030 0091 13       		.uleb128 0x13
 1031 0092 02       		.uleb128 0x2
 1032 0093 18       		.uleb128 0x18
 1033 0094 00       		.byte	0
 1034 0095 00       		.byte	0
 1035 0096 0B       		.uleb128 0xb
 1036 0097 2E       		.uleb128 0x2e
 1037 0098 00       		.byte	0
 1038 0099 3F       		.uleb128 0x3f
 1039 009a 19       		.uleb128 0x19
 1040 009b 03       		.uleb128 0x3
 1041 009c 0E       		.uleb128 0xe
 1042 009d 3A       		.uleb128 0x3a
 1043 009e 0B       		.uleb128 0xb
 1044 009f 3B       		.uleb128 0x3b
 1045 00a0 05       		.uleb128 0x5
 1046 00a1 27       		.uleb128 0x27
 1047 00a2 19       		.uleb128 0x19
 1048 00a3 49       		.uleb128 0x49
 1049 00a4 13       		.uleb128 0x13
 1050 00a5 11       		.uleb128 0x11
 1051 00a6 01       		.uleb128 0x1
 1052 00a7 12       		.uleb128 0x12
 1053 00a8 06       		.uleb128 0x6
 1054 00a9 40       		.uleb128 0x40
 1055 00aa 18       		.uleb128 0x18
 1056 00ab 9742     		.uleb128 0x2117
 1057 00ad 19       		.uleb128 0x19
 1058 00ae 00       		.byte	0
 1059 00af 00       		.byte	0
 1060 00b0 0C       		.uleb128 0xc
 1061 00b1 2E       		.uleb128 0x2e
 1062 00b2 01       		.byte	0x1
 1063 00b3 3F       		.uleb128 0x3f
 1064 00b4 19       		.uleb128 0x19
 1065 00b5 03       		.uleb128 0x3
 1066 00b6 0E       		.uleb128 0xe
 1067 00b7 3A       		.uleb128 0x3a
 1068 00b8 0B       		.uleb128 0xb
 1069 00b9 3B       		.uleb128 0x3b
 1070 00ba 05       		.uleb128 0x5
 1071 00bb 27       		.uleb128 0x27
 1072 00bc 19       		.uleb128 0x19
 1073 00bd 11       		.uleb128 0x11
 1074 00be 01       		.uleb128 0x1
 1075 00bf 12       		.uleb128 0x12
 1076 00c0 06       		.uleb128 0x6
 1077 00c1 40       		.uleb128 0x40
 1078 00c2 18       		.uleb128 0x18
 1079 00c3 9742     		.uleb128 0x2117
 1080 00c5 19       		.uleb128 0x19
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 29


 1081 00c6 01       		.uleb128 0x1
 1082 00c7 13       		.uleb128 0x13
 1083 00c8 00       		.byte	0
 1084 00c9 00       		.byte	0
 1085 00ca 0D       		.uleb128 0xd
 1086 00cb 05       		.uleb128 0x5
 1087 00cc 00       		.byte	0
 1088 00cd 03       		.uleb128 0x3
 1089 00ce 0E       		.uleb128 0xe
 1090 00cf 3A       		.uleb128 0x3a
 1091 00d0 0B       		.uleb128 0xb
 1092 00d1 3B       		.uleb128 0x3b
 1093 00d2 05       		.uleb128 0x5
 1094 00d3 49       		.uleb128 0x49
 1095 00d4 13       		.uleb128 0x13
 1096 00d5 02       		.uleb128 0x2
 1097 00d6 17       		.uleb128 0x17
 1098 00d7 00       		.byte	0
 1099 00d8 00       		.byte	0
 1100 00d9 0E       		.uleb128 0xe
 1101 00da 05       		.uleb128 0x5
 1102 00db 00       		.byte	0
 1103 00dc 03       		.uleb128 0x3
 1104 00dd 0E       		.uleb128 0xe
 1105 00de 3A       		.uleb128 0x3a
 1106 00df 0B       		.uleb128 0xb
 1107 00e0 3B       		.uleb128 0x3b
 1108 00e1 0B       		.uleb128 0xb
 1109 00e2 49       		.uleb128 0x49
 1110 00e3 13       		.uleb128 0x13
 1111 00e4 02       		.uleb128 0x2
 1112 00e5 17       		.uleb128 0x17
 1113 00e6 00       		.byte	0
 1114 00e7 00       		.byte	0
 1115 00e8 0F       		.uleb128 0xf
 1116 00e9 34       		.uleb128 0x34
 1117 00ea 00       		.byte	0
 1118 00eb 03       		.uleb128 0x3
 1119 00ec 0E       		.uleb128 0xe
 1120 00ed 3A       		.uleb128 0x3a
 1121 00ee 0B       		.uleb128 0xb
 1122 00ef 3B       		.uleb128 0x3b
 1123 00f0 0B       		.uleb128 0xb
 1124 00f1 49       		.uleb128 0x49
 1125 00f2 13       		.uleb128 0x13
 1126 00f3 02       		.uleb128 0x2
 1127 00f4 18       		.uleb128 0x18
 1128 00f5 00       		.byte	0
 1129 00f6 00       		.byte	0
 1130 00f7 10       		.uleb128 0x10
 1131 00f8 898201   		.uleb128 0x4109
 1132 00fb 00       		.byte	0
 1133 00fc 11       		.uleb128 0x11
 1134 00fd 01       		.uleb128 0x1
 1135 00fe 31       		.uleb128 0x31
 1136 00ff 13       		.uleb128 0x13
 1137 0100 00       		.byte	0
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 30


 1138 0101 00       		.byte	0
 1139 0102 11       		.uleb128 0x11
 1140 0103 2E       		.uleb128 0x2e
 1141 0104 01       		.byte	0x1
 1142 0105 3F       		.uleb128 0x3f
 1143 0106 19       		.uleb128 0x19
 1144 0107 03       		.uleb128 0x3
 1145 0108 0E       		.uleb128 0xe
 1146 0109 3A       		.uleb128 0x3a
 1147 010a 0B       		.uleb128 0xb
 1148 010b 3B       		.uleb128 0x3b
 1149 010c 05       		.uleb128 0x5
 1150 010d 27       		.uleb128 0x27
 1151 010e 19       		.uleb128 0x19
 1152 010f 11       		.uleb128 0x11
 1153 0110 01       		.uleb128 0x1
 1154 0111 12       		.uleb128 0x12
 1155 0112 06       		.uleb128 0x6
 1156 0113 40       		.uleb128 0x40
 1157 0114 18       		.uleb128 0x18
 1158 0115 9742     		.uleb128 0x2117
 1159 0117 19       		.uleb128 0x19
 1160 0118 00       		.byte	0
 1161 0119 00       		.byte	0
 1162 011a 12       		.uleb128 0x12
 1163 011b 34       		.uleb128 0x34
 1164 011c 00       		.byte	0
 1165 011d 03       		.uleb128 0x3
 1166 011e 0E       		.uleb128 0xe
 1167 011f 3A       		.uleb128 0x3a
 1168 0120 0B       		.uleb128 0xb
 1169 0121 3B       		.uleb128 0x3b
 1170 0122 05       		.uleb128 0x5
 1171 0123 49       		.uleb128 0x49
 1172 0124 13       		.uleb128 0x13
 1173 0125 02       		.uleb128 0x2
 1174 0126 17       		.uleb128 0x17
 1175 0127 00       		.byte	0
 1176 0128 00       		.byte	0
 1177 0129 13       		.uleb128 0x13
 1178 012a 34       		.uleb128 0x34
 1179 012b 00       		.byte	0
 1180 012c 03       		.uleb128 0x3
 1181 012d 0E       		.uleb128 0xe
 1182 012e 3A       		.uleb128 0x3a
 1183 012f 0B       		.uleb128 0xb
 1184 0130 3B       		.uleb128 0x3b
 1185 0131 05       		.uleb128 0x5
 1186 0132 49       		.uleb128 0x49
 1187 0133 13       		.uleb128 0x13
 1188 0134 02       		.uleb128 0x2
 1189 0135 18       		.uleb128 0x18
 1190 0136 00       		.byte	0
 1191 0137 00       		.byte	0
 1192 0138 00       		.byte	0
 1193              		.section	.debug_loc,"",%progbits
 1194              	.Ldebug_loc0:
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 31


 1195              	.LLST0:
 1196 0000 2A000000 		.4byte	.LVL0
 1197 0004 5A000000 		.4byte	.LVL1
 1198 0008 0100     		.2byte	0x1
 1199 000a 52       		.byte	0x52
 1200 000b 00000000 		.4byte	0
 1201 000f 00000000 		.4byte	0
 1202              	.LLST1:
 1203 0013 00000000 		.4byte	.LVL3
 1204 0017 08000000 		.4byte	.LVL4
 1205 001b 0100     		.2byte	0x1
 1206 001d 50       		.byte	0x50
 1207 001e 08000000 		.4byte	.LVL4
 1208 0022 14000000 		.4byte	.LFE6
 1209 0026 0400     		.2byte	0x4
 1210 0028 F3       		.byte	0xf3
 1211 0029 01       		.uleb128 0x1
 1212 002a 50       		.byte	0x50
 1213 002b 9F       		.byte	0x9f
 1214 002c 00000000 		.4byte	0
 1215 0030 00000000 		.4byte	0
 1216              	.LLST2:
 1217 0034 00000000 		.4byte	.LVL5
 1218 0038 06000000 		.4byte	.LVL6
 1219 003c 0100     		.2byte	0x1
 1220 003e 50       		.byte	0x50
 1221 003f 06000000 		.4byte	.LVL6
 1222 0043 18000000 		.4byte	.LFE7
 1223 0047 0400     		.2byte	0x4
 1224 0049 F3       		.byte	0xf3
 1225 004a 01       		.uleb128 0x1
 1226 004b 50       		.byte	0x50
 1227 004c 9F       		.byte	0x9f
 1228 004d 00000000 		.4byte	0
 1229 0051 00000000 		.4byte	0
 1230              	.LLST3:
 1231 0055 00000000 		.4byte	.LVL7
 1232 0059 09000000 		.4byte	.LVL8-1
 1233 005d 0100     		.2byte	0x1
 1234 005f 50       		.byte	0x50
 1235 0060 09000000 		.4byte	.LVL8-1
 1236 0064 DC000000 		.4byte	.LFE4
 1237 0068 0400     		.2byte	0x4
 1238 006a F3       		.byte	0xf3
 1239 006b 01       		.uleb128 0x1
 1240 006c 50       		.byte	0x50
 1241 006d 9F       		.byte	0x9f
 1242 006e 00000000 		.4byte	0
 1243 0072 00000000 		.4byte	0
 1244              	.LLST4:
 1245 0076 00000000 		.4byte	.LVL7
 1246 007a 09000000 		.4byte	.LVL8-1
 1247 007e 0100     		.2byte	0x1
 1248 0080 51       		.byte	0x51
 1249 0081 09000000 		.4byte	.LVL8-1
 1250 0085 DC000000 		.4byte	.LFE4
 1251 0089 0400     		.2byte	0x4
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 32


 1252 008b F3       		.byte	0xf3
 1253 008c 01       		.uleb128 0x1
 1254 008d 51       		.byte	0x51
 1255 008e 9F       		.byte	0x9f
 1256 008f 00000000 		.4byte	0
 1257 0093 00000000 		.4byte	0
 1258              	.LLST5:
 1259 0097 1E000000 		.4byte	.LVL11
 1260 009b 2C000000 		.4byte	.LVL12
 1261 009f 0100     		.2byte	0x1
 1262 00a1 52       		.byte	0x52
 1263 00a2 36000000 		.4byte	.LVL13
 1264 00a6 38000000 		.4byte	.LVL14
 1265 00aa 0100     		.2byte	0x1
 1266 00ac 52       		.byte	0x52
 1267 00ad 38000000 		.4byte	.LVL14
 1268 00b1 3A000000 		.4byte	.LVL15
 1269 00b5 0100     		.2byte	0x1
 1270 00b7 53       		.byte	0x53
 1271 00b8 46000000 		.4byte	.LVL16
 1272 00bc A4000000 		.4byte	.LVL18
 1273 00c0 0100     		.2byte	0x1
 1274 00c2 52       		.byte	0x52
 1275 00c3 A6000000 		.4byte	.LVL19
 1276 00c7 A8000000 		.4byte	.LVL20
 1277 00cb 0100     		.2byte	0x1
 1278 00cd 52       		.byte	0x52
 1279 00ce B8000000 		.4byte	.LVL21
 1280 00d2 C4000000 		.4byte	.LVL22
 1281 00d6 0100     		.2byte	0x1
 1282 00d8 52       		.byte	0x52
 1283 00d9 00000000 		.4byte	0
 1284 00dd 00000000 		.4byte	0
 1285              	.LLST6:
 1286 00e1 0C000000 		.4byte	.LVL9
 1287 00e5 50000000 		.4byte	.LVL17
 1288 00e9 0100     		.2byte	0x1
 1289 00eb 56       		.byte	0x56
 1290 00ec 00000000 		.4byte	0
 1291 00f0 00000000 		.4byte	0
 1292              	.LLST7:
 1293 00f4 00000000 		.4byte	.LVL23
 1294 00f8 07000000 		.4byte	.LVL24-1
 1295 00fc 0100     		.2byte	0x1
 1296 00fe 50       		.byte	0x50
 1297 00ff 07000000 		.4byte	.LVL24-1
 1298 0103 5C000000 		.4byte	.LFE9
 1299 0107 0400     		.2byte	0x4
 1300 0109 F3       		.byte	0xf3
 1301 010a 01       		.uleb128 0x1
 1302 010b 50       		.byte	0x50
 1303 010c 9F       		.byte	0x9f
 1304 010d 00000000 		.4byte	0
 1305 0111 00000000 		.4byte	0
 1306              	.LLST8:
 1307 0115 0A000000 		.4byte	.LVL25
 1308 0119 56000000 		.4byte	.LVL29
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 33


 1309 011d 0100     		.2byte	0x1
 1310 011f 55       		.byte	0x55
 1311 0120 00000000 		.4byte	0
 1312 0124 00000000 		.4byte	0
 1313              		.section	.debug_aranges,"",%progbits
 1314 0000 6C000000 		.4byte	0x6c
 1315 0004 0200     		.2byte	0x2
 1316 0006 00000000 		.4byte	.Ldebug_info0
 1317 000a 04       		.byte	0x4
 1318 000b 00       		.byte	0
 1319 000c 0000     		.2byte	0
 1320 000e 0000     		.2byte	0
 1321 0010 00000000 		.4byte	.LFB0
 1322 0014 1C000000 		.4byte	.LFE0-.LFB0
 1323 0018 00000000 		.4byte	.LFB1
 1324 001c 1C000000 		.4byte	.LFE1-.LFB1
 1325 0020 00000000 		.4byte	.LFB2
 1326 0024 6C000000 		.4byte	.LFE2-.LFB2
 1327 0028 00000000 		.4byte	.LFB3
 1328 002c 20000000 		.4byte	.LFE3-.LFB3
 1329 0030 00000000 		.4byte	.LFB5
 1330 0034 0C000000 		.4byte	.LFE5-.LFB5
 1331 0038 00000000 		.4byte	.LFB6
 1332 003c 14000000 		.4byte	.LFE6-.LFB6
 1333 0040 00000000 		.4byte	.LFB7
 1334 0044 18000000 		.4byte	.LFE7-.LFB7
 1335 0048 00000000 		.4byte	.LFB8
 1336 004c 10000000 		.4byte	.LFE8-.LFB8
 1337 0050 00000000 		.4byte	.LFB10
 1338 0054 10000000 		.4byte	.LFE10-.LFB10
 1339 0058 00000000 		.4byte	.LFB4
 1340 005c DC000000 		.4byte	.LFE4-.LFB4
 1341 0060 00000000 		.4byte	.LFB9
 1342 0064 5C000000 		.4byte	.LFE9-.LFB9
 1343 0068 00000000 		.4byte	0
 1344 006c 00000000 		.4byte	0
 1345              		.section	.debug_ranges,"",%progbits
 1346              	.Ldebug_ranges0:
 1347 0000 00000000 		.4byte	.LFB0
 1348 0004 1C000000 		.4byte	.LFE0
 1349 0008 00000000 		.4byte	.LFB1
 1350 000c 1C000000 		.4byte	.LFE1
 1351 0010 00000000 		.4byte	.LFB2
 1352 0014 6C000000 		.4byte	.LFE2
 1353 0018 00000000 		.4byte	.LFB3
 1354 001c 20000000 		.4byte	.LFE3
 1355 0020 00000000 		.4byte	.LFB5
 1356 0024 0C000000 		.4byte	.LFE5
 1357 0028 00000000 		.4byte	.LFB6
 1358 002c 14000000 		.4byte	.LFE6
 1359 0030 00000000 		.4byte	.LFB7
 1360 0034 18000000 		.4byte	.LFE7
 1361 0038 00000000 		.4byte	.LFB8
 1362 003c 10000000 		.4byte	.LFE8
 1363 0040 00000000 		.4byte	.LFB10
 1364 0044 10000000 		.4byte	.LFE10
 1365 0048 00000000 		.4byte	.LFB4
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 34


 1366 004c DC000000 		.4byte	.LFE4
 1367 0050 00000000 		.4byte	.LFB9
 1368 0054 5C000000 		.4byte	.LFE9
 1369 0058 00000000 		.4byte	0
 1370 005c 00000000 		.4byte	0
 1371              		.section	.debug_line,"",%progbits
 1372              	.Ldebug_line0:
 1373 0000 77010000 		.section	.debug_str,"MS",%progbits,1
 1373      02004900 
 1373      00000201 
 1373      FB0E0D00 
 1373      01010101 
 1374              	.LASF19:
 1375 0000 5350495F 		.ascii	"SPI_IntClock_StandbyPower\000"
 1375      496E7443 
 1375      6C6F636B 
 1375      5F537461 
 1375      6E646279 
 1376              	.LASF34:
 1377 001a 63757272 		.ascii	"currDiv\000"
 1377      44697600 
 1378              	.LASF15:
 1379 0022 72656731 		.ascii	"reg16\000"
 1379      3600
 1380              	.LASF2:
 1381 0028 73686F72 		.ascii	"short int\000"
 1381      7420696E 
 1381      7400
 1382              	.LASF23:
 1383 0032 5350495F 		.ascii	"SPI_IntClock_ClearModeRegister\000"
 1383      496E7443 
 1383      6C6F636B 
 1383      5F436C65 
 1383      61724D6F 
 1384              	.LASF17:
 1385 0051 5350495F 		.ascii	"SPI_IntClock_Stop\000"
 1385      496E7443 
 1385      6C6F636B 
 1385      5F53746F 
 1385      7000
 1386              	.LASF10:
 1387 0063 75696E74 		.ascii	"uint16\000"
 1387      313600
 1388              	.LASF29:
 1389 006a 72657374 		.ascii	"restart\000"
 1389      61727400 
 1390              	.LASF27:
 1391 0072 5350495F 		.ascii	"SPI_IntClock_SetDividerRegister\000"
 1391      496E7443 
 1391      6C6F636B 
 1391      5F536574 
 1391      44697669 
 1392              	.LASF9:
 1393 0092 75696E74 		.ascii	"uint8\000"
 1393      3800
 1394              	.LASF28:
 1395 0098 636C6B44 		.ascii	"clkDivider\000"
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 35


 1395      69766964 
 1395      657200
 1396              	.LASF25:
 1397 00a3 5350495F 		.ascii	"SPI_IntClock_GetModeRegister\000"
 1397      496E7443 
 1397      6C6F636B 
 1397      5F476574 
 1397      4D6F6465 
 1398              	.LASF11:
 1399 00c0 666C6F61 		.ascii	"float\000"
 1399      7400
 1400              	.LASF18:
 1401 00c6 5350495F 		.ascii	"SPI_IntClock_StopBlock\000"
 1401      496E7443 
 1401      6C6F636B 
 1401      5F53746F 
 1401      70426C6F 
 1402              	.LASF6:
 1403 00dd 6C6F6E67 		.ascii	"long long int\000"
 1403      206C6F6E 
 1403      6720696E 
 1403      7400
 1404              	.LASF4:
 1405 00eb 6C6F6E67 		.ascii	"long int\000"
 1405      20696E74 
 1405      00
 1406              	.LASF37:
 1407 00f4 47656E65 		.ascii	"Generated_Source\\PSoC5\\SPI_IntClock.c\000"
 1407      72617465 
 1407      645F536F 
 1407      75726365 
 1407      5C50536F 
 1408              	.LASF35:
 1409 011a 6F6C6453 		.ascii	"oldSrc\000"
 1409      726300
 1410              	.LASF21:
 1411 0121 73746174 		.ascii	"state\000"
 1411      6500
 1412              	.LASF20:
 1413 0127 5350495F 		.ascii	"SPI_IntClock_SetModeRegister\000"
 1413      496E7443 
 1413      6C6F636B 
 1413      5F536574 
 1413      4D6F6465 
 1414              	.LASF1:
 1415 0144 756E7369 		.ascii	"unsigned char\000"
 1415      676E6564 
 1415      20636861 
 1415      7200
 1416              	.LASF22:
 1417 0152 6D6F6465 		.ascii	"modeBitMask\000"
 1417      4269744D 
 1417      61736B00 
 1418              	.LASF0:
 1419 015e 7369676E 		.ascii	"signed char\000"
 1419      65642063 
 1419      68617200 
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 36


 1420              	.LASF7:
 1421 016a 6C6F6E67 		.ascii	"long long unsigned int\000"
 1421      206C6F6E 
 1421      6720756E 
 1421      7369676E 
 1421      65642069 
 1422              	.LASF8:
 1423 0181 756E7369 		.ascii	"unsigned int\000"
 1423      676E6564 
 1423      20696E74 
 1423      00
 1424              	.LASF3:
 1425 018e 73686F72 		.ascii	"short unsigned int\000"
 1425      7420756E 
 1425      7369676E 
 1425      65642069 
 1425      6E7400
 1426              	.LASF13:
 1427 01a1 63686172 		.ascii	"char\000"
 1427      00
 1428              	.LASF33:
 1429 01a6 636C6B53 		.ascii	"clkSource\000"
 1429      6F757263 
 1429      6500
 1430              	.LASF32:
 1431 01b0 63757272 		.ascii	"currSrc\000"
 1431      53726300 
 1432              	.LASF30:
 1433 01b8 6F6C6444 		.ascii	"oldDivider\000"
 1433      69766964 
 1433      657200
 1434              	.LASF14:
 1435 01c3 72656738 		.ascii	"reg8\000"
 1435      00
 1436              	.LASF5:
 1437 01c8 6C6F6E67 		.ascii	"long unsigned int\000"
 1437      20756E73 
 1437      69676E65 
 1437      6420696E 
 1437      7400
 1438              	.LASF12:
 1439 01da 646F7562 		.ascii	"double\000"
 1439      6C6500
 1440              	.LASF16:
 1441 01e1 5350495F 		.ascii	"SPI_IntClock_Start\000"
 1441      496E7443 
 1441      6C6F636B 
 1441      5F537461 
 1441      727400
 1442              	.LASF31:
 1443 01f4 656E6162 		.ascii	"enabled\000"
 1443      6C656400 
 1444              	.LASF24:
 1445 01fc 5350495F 		.ascii	"SPI_IntClock_GetDividerRegister\000"
 1445      496E7443 
 1445      6C6F636B 
 1445      5F476574 
ARM GAS  C:\Users\afne7\AppData\Local\Temp\ccE2kTjY.s 			page 37


 1445      44697669 
 1446              	.LASF36:
 1447 021c 474E5520 		.ascii	"GNU C11 5.4.1 20160609 (release) [ARM/embedded-5-br"
 1447      43313120 
 1447      352E342E 
 1447      31203230 
 1447      31363036 
 1448 024f 616E6368 		.ascii	"anch revision 237715] -mcpu=cortex-m3 -mthumb -g -O"
 1448      20726576 
 1448      6973696F 
 1448      6E203233 
 1448      37373135 
 1449 0282 67202D66 		.ascii	"g -ffunction-sections -ffat-lto-objects\000"
 1449      66756E63 
 1449      74696F6E 
 1449      2D736563 
 1449      74696F6E 
 1450              	.LASF38:
 1451 02aa 433A5C55 		.ascii	"C:\\Users\\afne7\\Desktop\\SAFE\\Firmware\\LCD_test"
 1451      73657273 
 1451      5C61666E 
 1451      65375C44 
 1451      65736B74 
 1452 02d7 5C544654 		.ascii	"\\TFT_SSD1963\\TFT_test.cydsn\000"
 1452      5F535344 
 1452      31393633 
 1452      5C544654 
 1452      5F746573 
 1453              	.LASF26:
 1454 02f3 5350495F 		.ascii	"SPI_IntClock_GetSourceRegister\000"
 1454      496E7443 
 1454      6C6F636B 
 1454      5F476574 
 1454      536F7572 
 1455              	.LASF39:
 1456 0312 5350495F 		.ascii	"SPI_IntClock_SetSourceRegister\000"
 1456      496E7443 
 1456      6C6F636B 
 1456      5F536574 
 1456      536F7572 
 1457              		.ident	"GCC: (GNU Tools for ARM Embedded Processors) 5.4.1 20160609 (release) [ARM/embedded-5-bran
